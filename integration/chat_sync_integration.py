#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Chat Sync Plugin —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–ª–∞–≥–∏–Ω–æ–º –∏ —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
"""

import os
import sys
import threading
import time
from datetime import datetime
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from chat_sync_plugin import ChatSyncPlugin
from databaseHandler.databaseSetup import SQLiteDB
from logger import logger
from messaging.message_sender import initialize_message_sender
from funpayHandler.funpay_chat_sync import initialize_funpay_chat_sync, get_funpay_chat_sync, cleanup_funpay_chat_sync


class ChatSyncIntegration:
    """–ö–ª–∞—Å—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞ Chat Sync —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.plugin = ChatSyncPlugin()
        self.db = SQLiteDB()
        self.monitoring_active = False
        self.monitor_thread = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        self.init()
    
    def init(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Chat Sync –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FunPay Chat Sync
            if initialize_funpay_chat_sync(self.plugin):
                logger.info("FunPay Chat Sync –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å FunPay Chat Sync")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            self.start_account_monitoring()
            
            logger.info("Chat Sync –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {str(e)}")
    
    def start_account_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        if not self.monitoring_active:
            self.monitoring_active = True
            self.monitor_thread = threading.Thread(target=self._monitor_accounts, daemon=True)
            self.monitor_thread.start()
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_account_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        self.monitoring_active = False
        if self.monitor_thread:
            self.monitor_thread.join(timeout=5)
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _monitor_accounts(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö"""
        last_rental_states = {}
        
        while self.monitoring_active:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                accounts = self.db.get_all_accounts()
                current_rental_states = {
                    acc['id']: acc['owner'] for acc in accounts
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                for account_id, current_owner in current_rental_states.items():
                    last_owner = last_rental_states.get(account_id)
                    
                    if last_owner != current_owner:
                        # –°—Ç–∞—Ç—É—Å –∞—Ä–µ–Ω–¥—ã –∏–∑–º–µ–Ω–∏–ª—Å—è
                        self._handle_rental_status_change(account_id, last_owner, current_owner)
                        last_rental_states[account_id] = current_owner
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                last_rental_states.update(current_rental_states)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}")
                time.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ
    
    def _handle_rental_status_change(self, account_id: int, old_owner: str, new_owner: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {old_owner} -> {new_owner}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–ª–∞–≥–∏–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            self.plugin.handle_rental_status_change(account_id, old_owner, new_owner)
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
            if self.plugin.config.get('auto_sync_accounts', True):
                self.sync_account(account_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä–µ–Ω–¥—ã: {str(e)}")
    
    def sync_account(self, account_id: int) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
        try:
            account = self.db.get_account_by_id(account_id)
            if not account:
                logger.error(f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ø–ª–∞–≥–∏–Ω–æ–º
            success = self.plugin.sync_account_with_chat(account_id, account_id)
            
            if success:
                logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {account['account_name']} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account['account_name']}")
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {str(e)}")
            return False
    
    def sync_all_accounts(self) -> Dict[str, int]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            result = self.plugin.sync_all_accounts()
            logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result['synced']} —É—Å–ø–µ—à–Ω–æ, {result['errors']} –æ—à–∏–±–æ–∫")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return {'synced': 0, 'errors': 1}
    
    def send_funpay_message(self, account_id: int, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ FunPay —á–∞—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account = self.db.get_account_by_id(account_id)
            if not account:
                logger.error(f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–ª–∞–≥–∏–Ω
            success = self.plugin.send_funpay_message(account_id, message, account['account_name'])
            
            if success:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account['account_name']}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account['account_name']}")
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False
    
    def get_plugin_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–≥–∏–Ω–∞"""
        return self.plugin.get_plugin_status()
    
    def get_synced_accounts(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        return self.plugin.get_accounts_with_sync()
    
    def initialize_message_sender(self, account):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            initialize_message_sender(account)
            logger.info("MessageSender –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Chat Sync")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MessageSender: {str(e)}")
    
    def handle_new_order(self, order_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
        try:
            buyer_username = order_data.get('buyer_username')
            if not buyer_username:
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞
            accounts = self.db.get_unowned_accounts()
            if not accounts:
                logger.warning("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞")
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            account = accounts[0]
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å —á–∞—Ç–æ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            self.sync_account(account['id'])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
            message = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {buyer_username}\n–ê–∫–∫–∞—É–Ω—Ç: {account['account_name']}"
            self.plugin.send_telegram_message(
                self.plugin.threads.get(str(account['id'])), 
                message
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞: {str(e)}")
    
    def handle_rental_start(self, account_id: int, owner: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã"""
        try:
            account = self.db.get_account_by_id(account_id)
            if not account:
                return
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
            self.sync_account(account_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            message = f"üü¢ –ù–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã\n–ê–∫–∫–∞—É–Ω—Ç: {account['account_name']}\n–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä: {owner}"
            self.plugin.send_telegram_message(
                self.plugin.threads.get(str(account_id)), 
                message
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: {str(e)}")
    
    def handle_rental_end(self, account_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã"""
        try:
            account = self.db.get_account_by_id(account_id)
            if not account:
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            message = f"üî¥ –û–∫–æ–Ω—á–∞–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã\n–ê–∫–∫–∞—É–Ω—Ç: {account['account_name']}"
            self.plugin.send_telegram_message(
                self.plugin.threads.get(str(account_id)), 
                message
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã: {str(e)}")
    
    def handle_funpay_message(self, fp_chat_id: int, message: str, sender: str = None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ FunPay"""
        try:
            if not self.plugin.ready:
                return
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–ª–∞–≥–∏–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.plugin.handle_funpay_message(fp_chat_id, message, sender)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è FunPay: {str(e)}")
    
    def get_funpay_chats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ FunPay"""
        try:
            funpay_sync = get_funpay_chat_sync()
            if funpay_sync and funpay_sync.initialized:
                return funpay_sync.get_all_chats()
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤ FunPay: {str(e)}")
            return []
    
    def sync_accounts_with_funpay(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã —Å —á–∞—Ç–∞–º–∏ FunPay"""
        try:
            funpay_sync = get_funpay_chat_sync()
            if not funpay_sync or not funpay_sync.initialized:
                logger.error("FunPay Chat Sync –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return {'synced': 0, 'errors': 1}
            
            accounts = self.db.get_all_accounts()
            return funpay_sync.sync_with_accounts(accounts)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å FunPay: {str(e)}")
            return {'synced': 0, 'errors': 1}
    
    def send_funpay_message(self, chat_id: int, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ FunPay —á–∞—Ç"""
        try:
            funpay_sync = get_funpay_chat_sync()
            if not funpay_sync or not funpay_sync.initialized:
                logger.error("FunPay Chat Sync –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            return funpay_sync.send_chat_message(chat_id, message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ FunPay: {str(e)}")
            return False
    
    def get_funpay_chat_info(self, chat_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ FunPay"""
        try:
            funpay_sync = get_funpay_chat_sync()
            if not funpay_sync or not funpay_sync.initialized:
                return None
            
            return funpay_sync.get_chat_info(chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ FunPay: {str(e)}")
            return None
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.stop_account_monitoring()
            
            # –û—á–∏—â–∞–µ–º FunPay Chat Sync
            cleanup_funpay_chat_sync()
            
            logger.info("Chat Sync –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {str(e)}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
chat_sync_integration = None


def initialize_chat_sync_integration():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Chat Sync"""
    global chat_sync_integration
    
    try:
        if chat_sync_integration is None:
            chat_sync_integration = ChatSyncIntegration()
            logger.info("Chat Sync –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return chat_sync_integration
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Chat Sync –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        return None


def get_chat_sync_integration():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Chat Sync"""
    return chat_sync_integration


def cleanup_chat_sync_integration():
    """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Chat Sync"""
    global chat_sync_integration
    
    if chat_sync_integration:
        chat_sync_integration.cleanup()
        chat_sync_integration = None
