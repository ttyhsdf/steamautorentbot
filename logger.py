import logging
import coloredlogs
import os
import sys
from datetime import datetime
from pathlib import Path

class DetailedFormatter(logging.Formatter):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏
        if hasattr(record, 'funcName') and record.funcName != '<module>':
            location = f"{record.module}.{record.funcName}:{record.lineno}"
        else:
            location = f"{record.module}:{record.lineno}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏
        timestamp = datetime.fromtimestamp(record.created).strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        
        # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
        level_colors = {
            'DEBUG': '\033[36m',      # Cyan
            'INFO': '\033[32m',       # Green
            'WARNING': '\033[33m',    # Yellow
            'ERROR': '\033[31m',      # Red
            'CRITICAL': '\033[35m'    # Magenta
        }
        reset_color = '\033[0m'
        
        level_color = level_colors.get(record.levelname, '')
        level_text = f"{level_color}{record.levelname:8}{reset_color}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if hasattr(record, 'extra_info'):
            extra = f" | {record.extra_info}"
        else:
            extra = ""
            
        formatted_message = (
            f"{timestamp} | {level_text} | {location:30} | {record.getMessage()}{extra}"
        )
        
        return formatted_message

class BotLogger:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ª–æ–≥–µ—Ä –¥–ª—è –±–æ—Ç–∞"""
    
    def __init__(self, name="SteamRentBot"):
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.DEBUG)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.logger.handlers.clear()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        self._setup_console_handler()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥
        self._setup_file_handlers(log_dir)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        self._add_special_methods()
        
        self.info("üöÄ –õ–æ–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", extra_info="Logger started")
    
    def _setup_console_handler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º coloredlogs –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        coloredlogs.install(
            level="INFO",
            logger=self.logger,
            fmt="%(asctime)s | %(levelname)-8s | %(message)s",
            field_styles={
                'asctime': {'color': 'blue'},
                'levelname': {'color': 'white', 'bold': True},
                'message': {'color': 'white'}
            },
            level_styles={
                'debug': {'color': 'cyan'},
                'info': {'color': 'green'},
                'warning': {'color': 'yellow'},
                'error': {'color': 'red'},
                'critical': {'color': 'magenta', 'bold': True}
            }
        )
    
    def _setup_file_handlers(self, log_dir):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Ñ–∞–π–ª
        main_file_handler = logging.FileHandler(
            log_dir / "application.log", 
            encoding="utf-8-sig"
        )
        main_file_handler.setLevel(logging.DEBUG)
        main_formatter = DetailedFormatter()
        main_file_handler.setFormatter(main_formatter)
        self.logger.addHandler(main_file_handler)
        
        # –õ–æ–≥ –æ—à–∏–±–æ–∫
        error_file_handler = logging.FileHandler(
            log_dir / "errors.log", 
            encoding="utf-8-sig"
        )
        error_file_handler.setLevel(logging.ERROR)
        error_formatter = DetailedFormatter()
        error_file_handler.setFormatter(error_formatter)
        self.logger.addHandler(error_file_handler)
        
        # –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π FunPay
        funpay_file_handler = logging.FileHandler(
            log_dir / "funpay.log", 
            encoding="utf-8-sig"
        )
        funpay_file_handler.setLevel(logging.DEBUG)
        funpay_formatter = DetailedFormatter()
        funpay_file_handler.setFormatter(funpay_formatter)
        self.logger.addHandler(funpay_file_handler)
        
        # –õ–æ–≥ Telegram –±–æ—Ç–∞
        telegram_file_handler = logging.FileHandler(
            log_dir / "telegram.log", 
            encoding="utf-8-sig"
        )
        telegram_file_handler.setLevel(logging.DEBUG)
        telegram_formatter = DetailedFormatter()
        telegram_file_handler.setFormatter(telegram_formatter)
        self.logger.addHandler(telegram_file_handler)
        
        # –õ–æ–≥ AutoGuard —Å–∏—Å—Ç–µ–º—ã
        autoguard_file_handler = logging.FileHandler(
            log_dir / "autoguard.log", 
            encoding="utf-8-sig"
        )
        autoguard_file_handler.setLevel(logging.DEBUG)
        autoguard_formatter = DetailedFormatter()
        autoguard_file_handler.setFormatter(autoguard_formatter)
        self.logger.addHandler(autoguard_file_handler)
    
    def _add_special_methods(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        def log_bot_start():
            self.info("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω", extra_info="Bot started")
        
        def log_bot_stop():
            self.info("üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", extra_info="Bot stopped")
        
        def log_funpay_start():
            self.info("üîÑ FunPay –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞", extra_info="FunPay started")
        
        def log_funpay_stop():
            self.info("‚èπÔ∏è FunPay –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", extra_info="FunPay stopped")
        
        def log_new_order(order_id, buyer, amount, price):
            self.info(
                f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –æ—Ç {buyer}",
                extra_info=f"Amount: {amount}, Price: {price}‚ÇΩ"
            )
        
        def log_account_assigned(account_id, buyer, account_name):
            self.info(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_id} –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {buyer}",
                extra_info=f"Account: {account_name}"
            )
        
        def log_password_changed(account_id, new_password):
            self.info(
                f"üîê –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}",
                extra_info=f"New password: {new_password}"
            )
        
        def log_rental_expired(account_id, owner):
            self.warning(
                f"‚è∞ –ê—Ä–µ–Ω–¥–∞ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}",
                extra_info=f"Owner: {owner}"
            )
        
        def log_error(component, error_msg, extra_data=None):
            self.error(
                f"‚ùå –û—à–∏–±–∫–∞ –≤ {component}: {error_msg}",
                extra_info=extra_data or "No additional data"
            )
        
        def log_config_check(token_status, funpay_status, admin_status):
            self.info(
                "‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                extra_info=f"Bot: {token_status}, FunPay: {funpay_status}, Admin: {admin_status}"
            )
        
        def log_order_paid(order_id, buyer, amount, price):
            self.info(
                f"üí∞ –ó–∞–∫–∞–∑ #{order_id} –æ–ø–ª–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {buyer}",
                extra_info=f"Amount: {amount}, Price: {price}‚ÇΩ"
            )
        
        def log_order_confirmed(order_id, buyer):
            self.info(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
                extra_info=f"Buyer: {buyer}"
            )
        
        def log_order_refunded(order_id, buyer, reason):
            self.warning(
                f"üí∏ –ó–∞–∫–∞–∑ #{order_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω",
                extra_info=f"Buyer: {buyer}, Reason: {reason}"
            )
        
        def log_chat_opened(user):
            self.info(
                f"üí¨ –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user}",
                extra_info="Chat opened"
            )
        
        def log_chat_closed(user):
            self.info(
                f"üîí –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user}",
                extra_info="Chat closed"
            )
        
        def log_lot_updated(lot_name, changes):
            self.info(
                f"üìù –õ–æ—Ç '{lot_name}' –æ–±–Ω–æ–≤–ª–µ–Ω",
                extra_info=f"Changes: {changes}"
            )
        
        def log_feedback_received(author, rating, text):
            self.info(
                f"‚≠ê –û—Ç–∑—ã–≤ –æ—Ç {author}",
                extra_info=f"Rating: {rating}, Text: {text[:50]}..."
            )
        
        def log_autoguard_start():
            self.info("üîê AutoGuard —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞", extra_info="AutoGuard started")
        
        def log_autoguard_stop():
            self.info("‚èπÔ∏è AutoGuard —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", extra_info="AutoGuard stopped")
        
        def log_guard_code_sent(account_name, owner, code):
            self.info(
                f"üîë Steam Guard –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {account_name}",
                extra_info=f"Owner: {owner}, Code: {code}"
            )
        
        def log_guard_code_error(account_name, owner, error):
            self.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Steam Guard –∫–æ–¥–∞ –¥–ª—è {account_name}",
                extra_info=f"Owner: {owner}, Error: {error}"
            )
        
        def log_guard_scheduler_start(interval):
            self.info(
                f"‚è∞ AutoGuard –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω",
                extra_info=f"Interval: {interval}s"
            )
        
        def log_guard_scheduler_stop():
            self.info("‚èπÔ∏è AutoGuard –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", extra_info="Scheduler stopped")
        
        def log_guard_welcome_sent(account_name, owner, code):
            self.info(
                f"üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π Steam Guard –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {account_name}",
                extra_info=f"Owner: {owner}, Code: {code}"
            )
        
        def log_guard_task_cleared(count):
            self.info(
                f"üßπ –û—á–∏—â–µ–Ω–æ {count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á AutoGuard",
                extra_info="Old tasks cleaned"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∫ –ª–æ–≥–µ—Ä—É
        self.bot_start = log_bot_start
        self.bot_stop = log_bot_stop
        self.funpay_start = log_funpay_start
        self.funpay_stop = log_funpay_stop
        self.new_order = log_new_order
        self.account_assigned = log_account_assigned
        self.password_changed = log_password_changed
        self.rental_expired = log_rental_expired
        self.log_error = log_error
        self.config_check = log_config_check
        self.log_order_paid = log_order_paid
        self.log_order_confirmed = log_order_confirmed
        self.log_order_refunded = log_order_refunded
        self.log_chat_opened = log_chat_opened
        self.log_chat_closed = log_chat_closed
        self.log_lot_updated = log_lot_updated
        self.log_feedback_received = log_feedback_received
        self.autoguard_start = log_autoguard_start
        self.autoguard_stop = log_autoguard_stop
        self.guard_code_sent = log_guard_code_sent
        self.guard_code_error = log_guard_code_error
        self.guard_scheduler_start = log_guard_scheduler_start
        self.guard_scheduler_stop = log_guard_scheduler_stop
        self.guard_welcome_sent = log_guard_welcome_sent
        self.guard_task_cleared = log_guard_task_cleared
    
    def info(self, message, extra_info=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if extra_info:
            self.logger.info(message, extra={'extra_info': extra_info})
        else:
            self.logger.info(message)
    
    def debug(self, message, extra_info=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if extra_info:
            self.logger.debug(message, extra={'extra_info': extra_info})
        else:
            self.logger.debug(message)
    
    def warning(self, message, extra_info=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        if extra_info:
            self.logger.warning(message, extra={'extra_info': extra_info})
        else:
            self.logger.warning(message)
    
    def error(self, message, extra_info=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        if extra_info:
            self.logger.error(message, extra={'extra_info': extra_info})
        else:
            self.logger.error(message)
    
    def critical(self, message, extra_info=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏"""
        if extra_info:
            self.logger.critical(message, extra={'extra_info': extra_info})
        else:
            self.logger.critical(message)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–µ—Ä–∞
logger = BotLogger()

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_logger(name=None):
    if name:
        return logging.getLogger(name)
    return logger.logger
