#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—ã–¥–∞—á–∏ Steam Guard –∫–æ–¥–æ–≤
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Telegram –±–æ—Ç–∞ –∞—Ä–µ–Ω–¥—ã Steam –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import time
import threading
import asyncio
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import json

from config import (
    AUTO_GUARD_ENABLED, 
    AUTO_GUARD_ON_PURCHASE, 
    AUTO_GUARD_INTERVAL, 
    AUTO_GUARD_MAX_ATTEMPTS, 
    AUTO_GUARD_RETRY_DELAY,
    AUTO_GUARD_NOTIFY_ADMIN,
    AUTO_GUARD_LOG_LEVEL,
    ADMIN_ID
)
from steamHandler.SteamGuard import get_steam_guard_code
from logger import logger
from messaging.message_sender import send_message_by_owner


class AutoGuardManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏ Steam Guard –∫–æ–¥–æ–≤"""
    
    def __init__(self):
        self.enabled = AUTO_GUARD_ENABLED
        self.on_purchase = AUTO_GUARD_ON_PURCHASE
        self.interval = AUTO_GUARD_INTERVAL
        self.max_attempts = AUTO_GUARD_MAX_ATTEMPTS
        self.retry_delay = AUTO_GUARD_RETRY_DELAY
        self.notify_admin = AUTO_GUARD_NOTIFY_ADMIN
        self.log_level = AUTO_GUARD_LOG_LEVEL
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤
        self.active_tasks: Dict[str, Dict] = {}
        
        # –ü–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤
        self.scheduler_thread = None
        self.running = False
        
        logger.info("AutoGuardManager initialized", extra_info=f"Enabled: {self.enabled}, OnPurchase: {self.on_purchase}")
        logger.autoguard_start()
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤"""
        if not self.enabled:
            logger.info("AutoGuard scheduler disabled in config")
            return
        
        if self.running:
            logger.warning("AutoGuard scheduler already running")
            return
        
        self.running = True
        self.scheduler_thread = threading.Thread(target=self._scheduler_loop, daemon=True)
        self.scheduler_thread.start()
        logger.info("AutoGuard scheduler started", extra_info=f"Interval: {self.interval}s")
        logger.guard_scheduler_start(self.interval)
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.running = False
        if self.scheduler_thread:
            self.scheduler_thread.join(timeout=5)
        logger.info("AutoGuard scheduler stopped")
        logger.guard_scheduler_stop()
    
    def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.running:
            try:
                self._process_all_active_rentals()
                time.sleep(self.interval)
            except Exception as e:
                logger.error(f"Error in AutoGuard scheduler: {str(e)}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _process_all_active_rentals(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã"""
        try:
            conn = sqlite3.connect("database.db")
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã
            cursor.execute("""
                SELECT id, account_name, login, password, rental_duration, rental_start, owner, path_to_maFile
                FROM accounts 
                WHERE owner IS NOT NULL AND rental_start IS NOT NULL
            """)
            
            active_rentals = cursor.fetchall()
            
            for rental in active_rentals:
                account_id, account_name, login, password, rental_duration, rental_start, owner, mafile_path = rental
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –∞—Ä–µ–Ω–¥–∞
                if self._is_rental_expired(rental_start, rental_duration):
                    continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                self._send_guard_code_if_needed(account_id, account_name, owner, mafile_path)
            
            conn.close()
            
        except Exception as e:
            logger.error(f"Error processing active rentals: {str(e)}")
    
    def _is_rental_expired(self, rental_start: str, rental_duration: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –∞—Ä–µ–Ω–¥–∞"""
        try:
            start_time = datetime.fromisoformat(rental_start)
            end_time = start_time + timedelta(hours=rental_duration)
            return datetime.now() >= end_time
        except Exception as e:
            logger.error(f"Error checking rental expiration: {str(e)}")
            return True
    
    def _send_guard_code_if_needed(self, account_id: int, account_name: str, owner: str, mafile_path: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å Steam Guard –∫–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã –∫–æ–¥ –Ω–µ–¥–∞–≤–Ω–æ
            task_key = f"{account_id}_{owner}"
            if task_key in self.active_tasks:
                last_sent = self.active_tasks[task_key].get('last_sent', 0)
                if time.time() - last_sent < self.interval:
                    return  # –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥
            guard_code = self._get_guard_code_with_retry(mafile_path, account_name)
            
            if guard_code:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
                message = (
                    f"üîê **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è**\n\n"
                    f"**–ê–∫–∫–∞—É–Ω—Ç:** {account_name}\n"
                    f"**–ö–æ–¥:** `{guard_code}`\n\n"
                    f"‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 —Å–µ–∫—É–Ω–¥\n"
                    f"üîÑ –°–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ {self.interval // 60} –º–∏–Ω—É—Ç"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
                from messaging.message_sender import is_message_sender_ready
                if not is_message_sender_ready():
                    logger.warning("Message sender not ready, skipping guard code send")
                    return
                
                success = send_message_by_owner(owner, message)
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
                    self.active_tasks[task_key] = {
                        'last_sent': time.time(),
                        'account_name': account_name,
                        'owner': owner,
                        'success_count': self.active_tasks.get(task_key, {}).get('success_count', 0) + 1
                    }
                    
                    logger.info(f"AutoGuard code sent to {owner} for {account_name}", 
                               extra_info=f"Code: {guard_code}")
                    logger.guard_code_sent(account_name, owner, guard_code)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
                    if self.active_tasks[task_key]['success_count'] == 1:
                        try:
                            from botHandler.bot import send_message_to_admin
                            admin_message = (
                                f"üîê **AUTOGUARD: –ö–û–î –û–¢–ü–†–ê–í–õ–ï–ù**\n\n"
                                f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {owner}\n"
                                f"üéÆ **–ê–∫–∫–∞—É–Ω—Ç:** {account_name} (ID: {account_id})\n"
                                f"üîë **–ö–æ–¥:** {guard_code}\n"
                                f"‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                                f"‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞**"
                            )
                            send_message_to_admin(admin_message)
                        except Exception as admin_error:
                            logger.error(f"Error sending admin notification: {str(admin_error)}")
                else:
                    logger.warning(f"Failed to send AutoGuard code to {owner} for {account_name}")
                    logger.guard_code_error(account_name, owner, "Failed to send message")
                
            else:
                # –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥
                self._handle_guard_code_error(account_id, account_name, owner, "Failed to generate code")
                logger.guard_code_error(account_name, owner, "Failed to generate code")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
                try:
                    from botHandler.bot import send_message_to_admin
                    admin_message = (
                        f"‚ùå **AUTOGUARD: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê**\n\n"
                        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {owner}\n"
                        f"üéÆ **–ê–∫–∫–∞—É–Ω—Ç:** {account_name} (ID: {account_id})\n"
                        f"üö® **–û—à–∏–±–∫–∞:** –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Steam Guard –∫–æ–¥\n"
                        f"‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                        f"‚ö†Ô∏è **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ .maFile —Ñ–∞–π–ª–∞!**"
                    )
                    send_message_to_admin(admin_message)
                except Exception as admin_error:
                    logger.error(f"Error sending admin error notification: {str(admin_error)}")
                
        except Exception as e:
            logger.error(f"Error sending guard code to {owner} for {account_name}: {str(e)}")
            self._handle_guard_code_error(account_id, account_name, owner, str(e))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ–±—â–µ–π –æ—à–∏–±–∫–µ
            try:
                from botHandler.bot import send_message_to_admin
                admin_message = (
                    f"‚ùå **AUTOGUARD: –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò**\n\n"
                    f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {owner}\n"
                    f"üéÆ **–ê–∫–∫–∞—É–Ω—Ç:** {account_name} (ID: {account_id})\n"
                    f"üö® **–û—à–∏–±–∫–∞:** {str(e)}\n"
                    f"‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"‚ö†Ô∏è **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FunPay!**"
                )
                send_message_to_admin(admin_message)
            except Exception as admin_error:
                logger.error(f"Error sending admin error notification: {str(admin_error)}")
    
    def _get_guard_code_with_retry(self, mafile_path: str, account_name: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å Steam Guard –∫–æ–¥ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(self.max_attempts):
            try:
                guard_code = get_steam_guard_code(mafile_path)
                if guard_code:
                    return guard_code
                
                if attempt < self.max_attempts - 1:
                    logger.warning(f"Guard code generation failed for {account_name}, attempt {attempt + 1}/{self.max_attempts}")
                    time.sleep(self.retry_delay)
                
            except Exception as e:
                logger.error(f"Error generating guard code for {account_name}, attempt {attempt + 1}: {str(e)}")
                if attempt < self.max_attempts - 1:
                    time.sleep(self.retry_delay)
        
        return None
    
    def _handle_guard_code_error(self, account_id: int, account_name: str, owner: str, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞"""
        task_key = f"{account_id}_{owner}"
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        if task_key not in self.active_tasks:
            self.active_tasks[task_key] = {'error_count': 0}
        
        self.active_tasks[task_key]['error_count'] = self.active_tasks[task_key].get('error_count', 0) + 1
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.notify_admin and self.active_tasks[task_key]['error_count'] >= 3:
            admin_message = (
                f"‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º–∞ —Å Steam Guard –∫–æ–¥–æ–º**\n\n"
                f"**–ê–∫–∫–∞—É–Ω—Ç:** {account_name}\n"
                f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {owner}\n"
                f"**–û—à–∏–±–∫–∞:** {error}\n"
                f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫:** {self.active_tasks[task_key]['error_count']}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ .maFile –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞."
            )
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ Telegram
                from botHandler.bot import bot
                bot.send_message(ADMIN_ID, admin_message, parse_mode="Markdown")
            except Exception as e:
                logger.error(f"Failed to notify admin about guard code error: {str(e)}")
        
        logger.error(f"Guard code error for {account_name} (owner: {owner}): {error}")
    
    def send_guard_code_on_purchase(self, account_id: int, account_name: str, owner: str, mafile_path: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å Steam Guard –∫–æ–¥ —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"""
        if not self.on_purchase:
            return False
        
        try:
            guard_code = self._get_guard_code_with_retry(mafile_path, account_name)
            
            if guard_code:
                message = (
                    f"üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n\n"
                    f"**–ê–∫–∫–∞—É–Ω—Ç:** {account_name}\n"
                    f"**Steam Guard –∫–æ–¥:** `{guard_code}`\n\n"
                    f"‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 —Å–µ–∫—É–Ω–¥\n"
                    f"üîÑ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /code\n"
                    f"‚ùì –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /question\n\n"
                    f"**–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!** üéÆ"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
                from messaging.message_sender import is_message_sender_ready
                if not is_message_sender_ready():
                    logger.warning("Message sender not ready, skipping welcome guard code send")
                    return False
                
                success = send_message_by_owner(owner, message)
                
                if success:
                    logger.info(f"Welcome guard code sent to {owner} for {account_name}", 
                               extra_info=f"Code: {guard_code}")
                    logger.guard_welcome_sent(account_name, owner, guard_code)
                    return True
                else:
                    logger.warning(f"Failed to send welcome guard code to {owner} for {account_name}")
                    return False
            else:
                self._handle_guard_code_error(account_id, account_name, owner, "Failed to generate welcome code")
                return False
                
        except Exception as e:
            logger.error(f"Error sending welcome guard code to {owner} for {account_name}: {str(e)}")
            self._handle_guard_code_error(account_id, account_name, owner, str(e))
            return False
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã AutoGuard"""
        total_tasks = len(self.active_tasks)
        successful_tasks = sum(1 for task in self.active_tasks.values() if task.get('success_count', 0) > 0)
        error_tasks = sum(1 for task in self.active_tasks.values() if task.get('error_count', 0) > 0)
        
        return {
            'enabled': self.enabled,
            'on_purchase': self.on_purchase,
            'interval': self.interval,
            'running': self.running,
            'total_tasks': total_tasks,
            'successful_tasks': successful_tasks,
            'error_tasks': error_tasks,
            'success_rate': (successful_tasks / total_tasks * 100) if total_tasks > 0 else 0
        }
    
    def clear_old_tasks(self, max_age_hours: int = 24):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏"""
        current_time = time.time()
        max_age_seconds = max_age_hours * 3600
        
        tasks_to_remove = []
        for task_key, task_data in self.active_tasks.items():
            last_sent = task_data.get('last_sent', 0)
            if current_time - last_sent > max_age_seconds:
                tasks_to_remove.append(task_key)
        
        for task_key in tasks_to_remove:
            del self.active_tasks[task_key]
        
        if tasks_to_remove:
            logger.info(f"Cleared {len(tasks_to_remove)} old AutoGuard tasks")
            logger.guard_task_cleared(len(tasks_to_remove))


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
auto_guard_manager = AutoGuardManager()


def start_auto_guard():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É –≤—ã–¥–∞—á–∏ –∫–æ–¥–æ–≤"""
    auto_guard_manager.start_scheduler()
    logger.info("AutoGuard system started")
    logger.autoguard_start()


def stop_auto_guard():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É –≤—ã–¥–∞—á–∏ –∫–æ–¥–æ–≤"""
    auto_guard_manager.stop_scheduler()
    logger.info("AutoGuard system stopped")
    logger.autoguard_stop()


def send_welcome_guard_code(account_id: int, account_name: str, owner: str, mafile_path: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π Steam Guard –∫–æ–¥ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"""
    return auto_guard_manager.send_guard_code_on_purchase(account_id, account_name, owner, mafile_path)


def get_auto_guard_stats() -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É AutoGuard"""
    return auto_guard_manager.get_statistics()


def cleanup_auto_guard_tasks():
    """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ AutoGuard"""
    auto_guard_manager.clear_old_tasks()
