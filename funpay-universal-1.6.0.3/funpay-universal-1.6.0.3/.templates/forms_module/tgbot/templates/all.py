from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from .. import callback_datas as calls
from ...data import Data as data
from ...settings import Settings as sett
from ...meta import NAME, VERSION
from fpbot.funpaybot import get_funpay_bot
from FunPayAPI.types import LotShortcut

import math
import textwrap
from datetime import datetime, timedelta


def menu_text():
    txt = textwrap.dedent(f"""
        üìù <b>–ú–µ–Ω—é {NAME}</b>

        <b>{NAME}</b> v{VERSION}
        –ú–æ–¥—É–ª—å, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—ã

        <b>–°—Å—ã–ª–∫–∏:</b>
        ‚î£ <b>@alleexxeeyy</b> ‚Äî –≥–ª–∞–≤–Ω—ã–π –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
        ‚îó <b>@alexey_production_bot</b> ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π

        –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ ‚Üì
    """)
    return txt

def menu_kb():
    rows = [
        [
        InlineKeyboardButton(text="‚öôÔ∏è", callback_data=calls.FORMS_MenuNavigation(to="settings").pack())
        ],
        [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=calls.FORMS_InstructionNavigation(to="default").pack())], 
        [
        InlineKeyboardButton(text="üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", url="https://t.me/alleexxeeyy"), 
        InlineKeyboardButton(text="ü§ñ –ù–∞—à –±–æ—Ç", url="https://t.me/alexey_production_bot")
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def menu_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        üìù <b>–ú–µ–Ω—é {NAME}</b>
        \n{placeholder}
    """)
    return txt


def instruction_text():
    txt = textwrap.dedent(f"""
        üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {NAME}</b>
        –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –æ–ø–∏—Å–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –º–æ–¥—É–ª–µ–º

        –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ ‚Üì
    """)
    return txt

def instruction_kb():
    rows = [
        [InlineKeyboardButton(text="‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã", callback_data=calls.FORMS_InstructionNavigation(to="commands").pack())],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.FORMS_MenuNavigation(to="default").pack())]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def instruction_comms_text():
    txt = textwrap.dedent(f"""
        üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {NAME}</b> ‚Üí ‚å®Ô∏è <b>–ö–æ–º–∞–Ω–¥—ã</b>

        <code>!–º–æ—è–∞–Ω–∫–µ—Ç–∞</code> ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
        <code>!–∑–∞–ø–æ–ª–Ω–∏—Ç—å</code> ‚Äî –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã

        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì
    """)
    return txt

def instruction_comms_kb():
    rows = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.FORMS_InstructionNavigation(to="default").pack())]]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb


def settings_text():
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {NAME}</b>

        –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Üì
    """)
    return txt

def settings_kb():
    config = sett.get("config")
    log_states = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["funpay"]["bot"]["log_states"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    rows = [
        [InlineKeyboardButton(text=f"üëÅÔ∏è –õ–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å: {log_states}", callback_data="forms_switch_log_states")],
        [InlineKeyboardButton(text=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏—è", callback_data=calls.FORMS_MessagesPagination(page=0).pack())],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.FORMS_MenuNavigation(to="default").pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.FORMS_MenuNavigation(to="settings").pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def settings_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {NAME}</b>
        \n{placeholder}
    """)
    return txt


def settings_mess_text():
    messages = sett.get("messages")
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Üí ‚úâÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏—è</b>
        –í—Å–µ–≥–æ <b>{len(messages.keys())}</b> –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥–µ

        –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üì
    """)
    return txt

def settings_mess_kb(page: int = 0):
    messages = sett.get("messages")
    rows = []
    items_per_page = 8
    total_pages = math.ceil(len(messages.keys()) / items_per_page)
    total_pages = total_pages if total_pages > 0 else 1

    if page < 0: page = 0
    elif page >= total_pages: page = total_pages - 1

    start_offset = page * items_per_page
    end_offset = start_offset + items_per_page

    for mess_id, info in list(messages.items())[start_offset:end_offset]:
        enabled = "üü¢" if info["enabled"] else "üî¥"
        text_joined = "\n".join(info["text"])
        rows.append([InlineKeyboardButton(text=f"{enabled} {mess_id} | {text_joined}", callback_data=calls.FORMS_MessagePage(message_id=mess_id).pack())])

    buttons_row = []
    btn_back = InlineKeyboardButton(text="‚Üê", callback_data=calls.FORMS_MessagesPagination(page=page-1).pack()) if page > 0 else InlineKeyboardButton(text="üõë", callback_data="123")
    buttons_row.append(btn_back)
    buttons_row.append(InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="forms_enter_messages_page"))

    btn_next = InlineKeyboardButton(text="‚Üí", callback_data=calls.FORMS_MessagesPagination(page=page+1).pack()) if page < total_pages - 1 else InlineKeyboardButton(text="üõë", callback_data="123")
    buttons_row.append(btn_next)
    rows.append(buttons_row)

    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.FORMS_MenuNavigation(to="settings").pack()),
                 InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.FORMS_MessagesPagination(page=page).pack())])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def settings_mess_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Üí ‚úâÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏—è</b>
        \n{placeholder}
    """)
    return txt


def settings_mess_page_text(message_id: int):
    messages = sett.get("messages")
    enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if messages[message_id]["enabled"] else "üî¥–í—ã–∫–ª—é—á–µ–Ω–æ"
    message_text = "\n".join(messages[message_id]["text"]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    txt = textwrap.dedent(f"""
        ‚úíÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>

        üÜî <b>ID —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {message_id}
        üí° <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {enabled}
        üí¨ <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b> <blockquote>{message_text}</blockquote>

        –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì
    """)
    return txt

def settings_mess_page_kb(message_id: int, page: int = 0):
    messages = sett.get("messages")
    enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if messages[message_id]["enabled"] else "üî¥–í—ã–∫–ª—é—á–µ–Ω–æ"
    message_text = "\n".join(messages[message_id]["text"]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    rows = [
        [InlineKeyboardButton(text=f"üí° –°–æ—Å—Ç–æ—è–Ω–∏–µ: {enabled}", callback_data="forms_switch_message_enabled")],
        [InlineKeyboardButton(text=f"üí¨ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}", callback_data="forms_enter_message_text")],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.FORMS_MessagesPagination(page=page).pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.FORMS_MessagePage(message_id=message_id).pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def settings_mess_page_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚úíÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>
        \n{placeholder}
    """)
    return txt