from __init__ import VERSION
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import math
import textwrap
from datetime import datetime, timedelta

from .. import callback_datas as calls
from settings import Settings as sett
from data import Data as data
from fpbot.stats import get_stats

from uuid import UUID



def error_text(placeholder: str):
    txt = textwrap.dedent(f"""
        <b>‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ </b>

        <blockquote>{placeholder}</blockquote>
    """)
    return txt

def back_kb(cb: str):
    rows = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=cb)]]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def confirm_kb(confirm_cb: str, cancel_cb: str):
    rows = [[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=confirm_cb),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=cancel_cb)
    ]]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def destroy_kb():
    rows = [[InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="destroy")]]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def do_action_text(placeholder: str):
    txt = textwrap.dedent(f"""
        üß© <b>–î–µ–π—Å—Ç–≤–∏–µ</b>
        \n{placeholder}
    """)
    return txt

def log_text(title: str, text: str, by: str = "funpayuniversal"):
    txt = textwrap.dedent(f"""
        <b>{title}</b>
        \n{text}
        \n<i>{by}</i>
    """)
    return txt

def log_new_mess_kb(chat_name: str):
    rows = [[InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=calls.RememberChatName(name=chat_name, do="send_mess").pack())]]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def log_new_order_kb(chat_name: str, order_id: str):
    rows = [
        [
        InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=calls.RememberChatName(name=chat_name, do="send_mess").pack()),
        InlineKeyboardButton(text="üì¶ –í–æ–∑–≤—Ä–∞—Ç", callback_data=calls.RememberOrderId(or_id=order_id, do="refund").pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def log_new_review_kb(chat_name: str, order_id: str):
    rows = [
        [
        InlineKeyboardButton(text="üí¨üåü –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤", callback_data=calls.RememberOrderId(or_id=order_id, do="answer_rev").pack()),
        InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=calls.RememberChatName(name=chat_name, do="send_mess").pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb


def sign_text(placeholder: str):
    txt = textwrap.dedent(f"""
        üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>
        \n{placeholder}
    """)
    return txt


def menu_text():
    txt = textwrap.dedent(f"""
        üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

        <b>FunPay UNIVERSAL</b> v{VERSION}
        –ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è FunPay

        <b>–°—Å—ã–ª–∫–∏:</b>
        ‚î£ <b>@alleexxeeyy</b> ‚Äî –≥–ª–∞–≤–Ω—ã–π –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
        ‚î£ <b>@alexeyproduction</b> ‚Äî –∫–∞–Ω–∞–ª, –≥–¥–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏
        ‚îó <b>@alexey_production_bot</b> ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π

        –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ ‚Üì
    """)
    return txt

def menu_kb():
    rows = [
        [
        InlineKeyboardButton(text="‚öôÔ∏è", callback_data=calls.SettingsNavigation(to="default").pack()), 
        InlineKeyboardButton(text="üë§", callback_data=calls.MenuNavigation(to="profile").pack()), 
        InlineKeyboardButton(text="üö©", callback_data=calls.MenuNavigation(to="events").pack()),
        InlineKeyboardButton(text="üîå", callback_data=calls.ModulesPagination(page=0).pack()),
        InlineKeyboardButton(text="üìä", callback_data=calls.MenuNavigation(to="stats").pack())
        ],
        [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=calls.InstructionNavigation(to="default").pack())], 
        [
        InlineKeyboardButton(text="üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", url="https://t.me/alleexxeeyy"), 
        InlineKeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/alexeyproduction"), 
        InlineKeyboardButton(text="ü§ñ –ù–∞—à –±–æ—Ç", url="https://t.me/alexey_production_bot")
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb


def stats_text():
    from fpbot.funpaybot import get_funpay_bot
    stats = get_stats()
    txt = textwrap.dedent(f"""
        üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FunPay –±–æ—Ç–∞</b>

        –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: <b>{stats.bot_launch_time.strftime("%d.%m.%Y %H:%M:%S") or '–ù–µ –∑–∞–ø—É—â–µ–Ω'}</b>

        <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞:</b>
        ‚î£ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{stats.orders_completed}</b>
        ‚î£ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{stats.active_orders}</b>
        ‚î£ –í–æ–∑–≤—Ä–∞—Ç–æ–≤: <b>{stats.orders_refunded}</b>
        ‚îó –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{stats.earned_money} {get_funpay_bot().funpay_account.currency.name}</b>

        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì
    """)
    return txt

def stats_kb():
    rows = [
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.MenuNavigation(to="default").pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.MenuNavigation(to="stats").pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb


def events_text():
    config = sett.get("config")
    auto_support_tickets = data.get("auto_support_tickets")
    last_auto_support_tickets_create = (datetime.fromisoformat(auto_support_tickets["last_time"]).strftime("%d.%m.%Y %H:%M")) if auto_support_tickets.get("last_time") else "‚ùå –ù–µ –±—ã–ª–æ"
    next_auto_support_tickets_create = ((datetime.fromisoformat(auto_support_tickets["last_time"]) if auto_support_tickets.get("last_time") else datetime.now()) + timedelta(seconds=config["funpay"]["bot"]["auto_support_tickets_create_interval"])).strftime("%d.%m.%Y %H:%M")
    txt = textwrap.dedent(f"""
        üö© <b>–ò–≤–µ–Ω—Ç—ã</b>

        üìÜüìû <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–æ–≤:</b>
        ‚î£ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ:</b> {last_auto_support_tickets_create}
        ‚îó <b>–°–ª–µ–¥—É—é—â–µ–µ:</b> {next_auto_support_tickets_create}

        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì
    """)
    return txt

def events_kb():
    rows = [
        [InlineKeyboardButton(text="üìû –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç—ã –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–æ–≤", callback_data="confirm_creating_support_tickets")],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.MenuNavigation(to="default").pack()), 
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.MenuNavigation(to="events").pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def events_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        üö© <b>–ò–≤–µ–Ω—Ç—ã</b>
        \n{placeholder}
    """)
    return txt


def profile_text():
    from fpbot.funpaybot import get_funpay_bot
    account = get_funpay_bot().funpay_account
    profile = account.get_user(account.id)
    txt = textwrap.dedent(f"""
        üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>

        üÜî <b>ID:</b> {profile.id}
        üè∑Ô∏è <b>–ù–∏–∫–Ω–µ–π–º:</b> {profile.username}
        üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {account.total_balance} {account.currency.name}

        üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
          ‚î£ üìÑ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã:</b> {len(profile.get_lots())}
          ‚î£ üõçÔ∏è <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏:</b> {account.active_purchases}
          ‚îó üõí <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏:</b> {account.active_sales}

        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì
    """)
    return txt

def profile_kb():
    rows = [
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.MenuNavigation(to="default").pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.MenuNavigation(to="profile").pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb


def instruction_text():
    txt = textwrap.dedent(f"""
        üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>
        –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –æ–ø–∏—Å–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º

        –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ ‚Üì
    """)
    return txt

def instruction_kb():
    rows = [
        [InlineKeyboardButton(text="‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã", callback_data=calls.InstructionNavigation(to="commands").pack())],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.MenuNavigation(to="default").pack())]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb


def instruction_comms_text():
    txt = textwrap.dedent(f"""
        üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí ‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã</b>

        –ö–æ–º–∞–Ω–¥—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:
        ‚î£ <code>!–∫–æ–º–∞–Ω–¥—ã</code> ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–∞–º–∏
        ‚îó <code>!–ø—Ä–æ–¥–∞–≤–µ—Ü</code> ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º (–ø–∏—à–µ—Ç –≤–∞–º –≤ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ –ø–æ–º–æ—â–∏)

        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì
    """)
    return txt

def instruction_comms_kb():
    rows = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.InstructionNavigation(to="default").pack())]]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb


def settings_text():
    config = sett.get("config")
    golden_key = config["funpay"]["api"]["golden_key"][:5] + ("*" * len(config["funpay"]["api"]["golden_key"][5:])) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    user_agent = config["funpay"]["api"]["user_agent"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

        <b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
        ‚î£ golden_key: <b>{golden_key}</b>
        ‚îó user_agent: <b>{user_agent}</b>

        –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Üì
    """)
    return txt

def settings_kb():
    rows = [
        [
        InlineKeyboardButton(text="üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data=calls.SettingsNavigation(to="auth").pack()),
        InlineKeyboardButton(text="üì∂ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", callback_data=calls.SettingsNavigation(to="conn").pack()),
        InlineKeyboardButton(text="üé´ –õ–æ—Ç—ã", callback_data=calls.SettingsNavigation(to="lots").pack())
        ],
        [
        InlineKeyboardButton(text="‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è", callback_data=calls.MessagesPagination(page=0).pack()),
        InlineKeyboardButton(text="‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã", callback_data=calls.CustomCommandsPagination(page=0).pack()),
        InlineKeyboardButton(text="üöÄ –ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞", callback_data=calls.AutoDeliveriesPagination(page=0).pack())
        ],
        [
        InlineKeyboardButton(text="üëÄ –õ–æ–≥–≥–µ—Ä", callback_data=calls.SettingsNavigation(to="logger").pack()),
        InlineKeyboardButton(text="üìû –¢–∏–∫–µ—Ç—ã", callback_data=calls.SettingsNavigation(to="tickets").pack()),
        InlineKeyboardButton(text="üîß –ü—Ä–æ—á–µ–µ", callback_data=calls.SettingsNavigation(to="other").pack())
        ],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.MenuNavigation(to="default").pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.SettingsNavigation(to="default").pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb


def settings_auth_text():
    config = sett.get("config")
    golden_key = config["funpay"]["api"]["golden_key"][:5] + ("*" * len(config["funpay"]["api"]["golden_key"][5:])) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    user_agent = config["funpay"]["api"]["user_agent"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>

        üîë <b>golden_key:</b> {golden_key}
        üé© <b>user_agent:</b> {user_agent}

        –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì
    """)
    return txt

def settings_auth_kb():
    config = sett.get("config")
    golden_key = config["funpay"]["api"]["golden_key"][:5] + ("*" * len(config["funpay"]["api"]["golden_key"][5:])) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    user_agent = config["funpay"]["api"]["user_agent"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    rows = [
        [InlineKeyboardButton(text=f"üîë golden_key: {golden_key}", callback_data="enter_golden_key")],
        [InlineKeyboardButton(text=f"üé© user_agent: {user_agent}", callback_data="enter_user_agent")],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.SettingsNavigation(to="default").pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.SettingsNavigation(to="authorization").pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def settings_auth_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>
        \n{placeholder}
    """)
    return txt


def settings_conn_text():
    config = sett.get("config")
    proxy = config["funpay"]["api"]["proxy"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    requests_timeout = config["funpay"]["api"]["requests_timeout"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    runner_requests_delay = config["funpay"]["api"]["runner_requests_delay"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üì∂ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</b>

        üåê <b>–ü—Ä–æ–∫—Å–∏:</b> {proxy}
        üõú <b>–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ funpay.com:</b> {requests_timeout}
        ‚è±Ô∏è <b>–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ funpay.com:</b> {runner_requests_delay}

        <b>–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ funpay.com?</b>
        –≠—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å —Å–∞–π—Ç–∞ FunPay. –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∞ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏—à—ë–ª ‚Äî –±–æ—Ç –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É. –ï—Å–ª–∏ —É –≤–∞—Å —Å–ª–∞–±—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ

        <b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ funpay.com?</b>
        –° –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ FunPay –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π. –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å—Ç–∞–≤–∏—Ç—å –Ω–∏–∂–µ 4 —Å–µ–∫—É–Ω–¥, —Ç–∞–∫ –∫–∞–∫ FunPay –ø–æ–ø—Ä–æ—Å—Ç—É –º–æ–∂–µ—Ç –∑–∞–±–∞–Ω–∏—Ç—å –≤–∞—à IP –∞–¥—Ä–µ—Å, –∏ –≤—ã —É–∂–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å –Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å—ã

        –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì
    """)
    return txt

def settings_conn_kb():
    config = sett.get("config")
    proxy = config["funpay"]["api"]["proxy"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    requests_timeout = config["funpay"]["api"]["requests_timeout"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    runner_requests_delay = config["funpay"]["api"]["runner_requests_delay"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    rows = [
        [InlineKeyboardButton(text=f"üåê –ü—Ä–æ–∫—Å–∏: {proxy}", callback_data="enter_proxy")],
        [InlineKeyboardButton(text=f"üõú –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ funpay.com: {requests_timeout}", callback_data="enter_funpayapi_requests_timeout")],
        [InlineKeyboardButton(text=f"‚è±Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ funpay.com: {runner_requests_delay}", callback_data="enter_funpayapi_runner_requests_delay")],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.SettingsNavigation(to="default").pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.SettingsNavigation(to="conn").pack())
        ]
    ]
    if config["funpay"]["api"]["proxy"]: rows[0].append(InlineKeyboardButton(text=f"‚ùåüåê –£–±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data="remove_proxy"))
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def settings_conn_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üì∂ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</b>
        \n{placeholder}
    """)
    return txt


def settings_lots_text():
    config = sett.get("config")
    auto_raising_lots_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["funpay"]["bot"]["auto_raising_lots_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üé´ –õ–æ—Ç—ã</b>

        ‚¨ÜÔ∏è <b>–ê–≤—Ç–æ-–ø–æ–¥–Ω—è—Ç–∏–µ –ª–æ—Ç–æ–≤:</b> {auto_raising_lots_enabled}

        –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì
    """)
    return txt

def settings_lots_kb():
    config = sett.get("config")
    auto_raising_lots_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["funpay"]["bot"]["auto_raising_lots_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    rows = [
        [InlineKeyboardButton(text=f"‚¨ÜÔ∏è –ê–≤—Ç–æ-–ø–æ–¥–Ω—è—Ç–∏–µ –ª–æ—Ç–æ–≤: {auto_raising_lots_enabled}", callback_data="switch_auto_raising_lots_enabled")],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.SettingsNavigation(to="default").pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.SettingsNavigation(to="lots").pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def settings_lots_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üé´ –õ–æ—Ç—ã</b>
        \n{placeholder}
    """)
    return txt


def settings_comm_text():
    custom_commands = sett.get("custom_commands")
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Üí ‚å®Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>
        –í—Å–µ–≥–æ <b>{len(custom_commands.keys())}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –≤ –∫–æ–Ω—Ñ–∏–≥–µ

        –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üì
    """)
    return txt

def settings_comm_kb(page: int = 0):
    custom_commands = sett.get("custom_commands")
    rows = []
    items_per_page = 7
    total_pages = math.ceil(len(custom_commands.keys())/items_per_page)
    total_pages = total_pages if total_pages > 0 else 1

    if page < 0: page = 0
    elif page >= total_pages: page = total_pages-1

    start_offset = page * items_per_page
    end_offset = start_offset + items_per_page

    for command in list(custom_commands.keys())[start_offset:end_offset]:
        command_text = "\n".join(custom_commands[command])
        rows.append([InlineKeyboardButton(text=f'{command} ‚Üí {command_text}', callback_data=calls.CustomCommandPage(command=command).pack())])
        
    buttons_row = []
    if page > 0: btn_back = InlineKeyboardButton(text="‚Üê", callback_data=calls.CustomCustomCommandsPagination(page=page-1).pack())
    else: btn_back = InlineKeyboardButton(text="üõë",callback_data="123")
    buttons_row.append(btn_back)
        
    btn_pages = InlineKeyboardButton(text=f"{page+1}/{total_pages}",callback_data="enter_custom_commands_page")
    buttons_row.append(btn_pages)
    
    if page < total_pages-1: btn_next = InlineKeyboardButton(text="‚Üí", callback_data=calls.CustomCustomCommandsPagination(page=page+1).pack())
    else: btn_next = InlineKeyboardButton(text="üõë", callback_data="123")
    buttons_row.append(btn_next)
    rows.append(buttons_row)

    rows.append([InlineKeyboardButton(text="‚ûï‚å®Ô∏è –î–æ–±–∞–≤–∏—Ç—å",callback_data="enter_new_custom_command")])
    rows.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.SettingsNavigation(to="default").pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.CustomCommandsPagination(page=page).pack())
        ])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def settings_comm_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Üí ‚å®Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>
        \n{placeholder}
    """)
    return txt

def settings_new_comm_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã</b>
        \n{placeholder}
    """)
    return txt


def settings_comm_page_text(command: str):
    custom_commands = sett.get("custom_commands")
    command_text = "\n".join(custom_commands[command]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    txt = textwrap.dedent(f"""
        ‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã</b>

        ‚å®Ô∏è <b>–ö–æ–º–∞–Ω–¥–∞:</b> {command}
        üí¨ <b>–û—Ç–≤–µ—Ç:</b> 
        <blockquote>{command_text}</blockquote>

        –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì
    """)
    return txt

def settings_comm_page_kb(command: str, page: int = 0):
    custom_commands = sett.get("custom_commands")
    command_text = "\n".join(custom_commands[command]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    rows = [
        [InlineKeyboardButton(text=f"‚úçÔ∏è –û—Ç–≤–µ—Ç: {command_text}", callback_data="enter_custom_command_answer")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="confirm_deleting_custom_command")],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.CustomCommandsPagination(page=page).pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.CustomCommandPage(command=command).pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def settings_comm_page_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã</b>
        \n{placeholder}
    """)
    return txt


def settings_deliv_text():
    auto_deliveries = sett.get("auto_deliveries")
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Üí üöÄ <b>–ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞</b>
        –í—Å–µ–≥–æ <b>{len(auto_deliveries.keys())}</b> –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ

        –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ID –ª–æ—Ç–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–≥–æ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ ‚Üì
    """)
    return txt

def settings_deliv_kb(page: int = 0):
    auto_deliveries = sett.get("auto_deliveries")
    rows = []
    items_per_page = 7
    total_pages = math.ceil(len(auto_deliveries.keys()) / items_per_page)
    total_pages = total_pages if total_pages > 0 else 1

    if page < 0: page = 0
    elif page >= total_pages: page = total_pages - 1

    start_offset = page * items_per_page
    end_offset = start_offset + items_per_page

    for lot_id in list(auto_deliveries.keys())[start_offset:end_offset]:
        auto_delivery_text = "\n".join(auto_deliveries[lot_id])
        rows.append([InlineKeyboardButton(text=f"{lot_id} ‚Üí {auto_delivery_text}", callback_data=calls.AutoDeliveryPage(lot_id=lot_id).pack())])

    buttons_row = []
    if page > 0: btn_back = InlineKeyboardButton(text="‚Üê", callback_data=calls.AutoDeliveriesPagination(page=page-1).pack())
    else: btn_back = InlineKeyboardButton(text="üõë", callback_data="123")
    buttons_row.append(btn_back)

    btn_pages = InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="enter_auto_deliveries_page")
    buttons_row.append(btn_pages)

    if page < total_pages - 1: btn_next = InlineKeyboardButton(text="‚Üí", callback_data=calls.AutoDeliveriesPagination(page=page+1).pack())
    else: btn_next = InlineKeyboardButton(text="üõë", callback_data="123")
    buttons_row.append(btn_next)

    rows.append(buttons_row)
    rows.append([InlineKeyboardButton(text="‚ûïüöÄ –î–æ–±–∞–≤–∏—Ç—å", callback_data="enter_new_auto_delivery_lot_id")])
    rows.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.SettingsNavigation(to="default").pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.AutoDeliveriesPagination(page=page).pack())
        ])

    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def settings_deliv_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Üí ‚å®Ô∏è <b>–ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞</b>
        \n{placeholder}
    """)
    return txt

def settings_new_deliv_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        üöÄ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>
        \n{placeholder}
    """)
    return txt


def settings_deliv_page_text(lot_id: int):
    auto_deliveries = sett.get("auto_deliveries")
    auto_delivery_message = "\n".join(auto_deliveries[str(lot_id)]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    txt = textwrap.dedent(f"""
        ‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>

        üÜî <b>ID –ª–æ—Ç–∞:</b> {lot_id}
        üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> 
        <blockquote>{auto_delivery_message}</blockquote>

        –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì
    """)
    return txt

def settings_deliv_page_kb(lot_id: int, page: int = 0):
    auto_deliveries = sett.get("auto_deliveries")
    auto_delivery_message = "\n".join(auto_deliveries[str(lot_id)]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    rows = [
        [InlineKeyboardButton(text=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {auto_delivery_message}", callback_data="enter_auto_delivery_message")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É", callback_data="confirm_deleting_auto_delivery")],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.AutoDeliveriesPagination(page=page).pack()), 
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.AutoDeliveryPage(lot_id=lot_id).pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def settings_deliv_page_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>
        \n{placeholder}
    """)
    return txt


def settings_mess_text():
    messages = sett.get("messages")
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Üí ‚úâÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏—è</b>
        –í—Å–µ–≥–æ <b>{len(messages.keys())}</b> –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥–µ

        –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üì
    """)
    return txt

def settings_mess_kb(page: int = 0):
    messages = sett.get("messages")
    rows = []
    items_per_page = 8
    total_pages = math.ceil(len(messages.keys()) / items_per_page)
    total_pages = total_pages if total_pages > 0 else 1

    if page < 0: page = 0
    elif page >= total_pages: page = total_pages - 1

    start_offset = page * items_per_page
    end_offset = start_offset + items_per_page

    for mess_id, info in list(messages.items())[start_offset:end_offset]:
        enabled = "üü¢" if info["enabled"] else "üî¥"
        text_joined = "\n".join(info["text"])
        rows.append([InlineKeyboardButton(text=f"{enabled} {mess_id} | {text_joined}", callback_data=calls.MessagePage(message_id=mess_id).pack())])

    buttons_row = []
    btn_back = InlineKeyboardButton(text="‚Üê", callback_data=calls.MessagesPagination(page=page-1).pack()) if page > 0 else InlineKeyboardButton(text="üõë", callback_data="123")
    buttons_row.append(btn_back)
    buttons_row.append(InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="enter_messages_page"))

    btn_next = InlineKeyboardButton(text="‚Üí", callback_data=calls.MessagesPagination(page=page+1).pack()) if page < total_pages - 1 else InlineKeyboardButton(text="üõë", callback_data="123")
    buttons_row.append(btn_next)
    rows.append(buttons_row)

    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.SettingsNavigation(to="default").pack()),
                 InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.MessagesPagination(page=page).pack())])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def settings_mess_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Üí ‚úâÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏—è</b>
        \n{placeholder}
    """)
    return txt


def settings_mess_page_text(message_id: int):
    messages = sett.get("messages")
    enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if messages[message_id]["enabled"] else "üî¥–í—ã–∫–ª—é—á–µ–Ω–æ"
    message_text = "\n".join(messages[message_id]["text"]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    txt = textwrap.dedent(f"""
        ‚úíÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>

        üÜî <b>ID —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {message_id}
        üí° <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {enabled}
        üí¨ <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b> <blockquote>{message_text}</blockquote>

        –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì
    """)
    return txt

def settings_mess_page_kb(message_id: int, page: int = 0):
    messages = sett.get("messages")
    enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if messages[message_id]["enabled"] else "üî¥–í—ã–∫–ª—é—á–µ–Ω–æ"
    message_text = "\n".join(messages[message_id]["text"]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    rows = [
        [InlineKeyboardButton(text=f"üí° –°–æ—Å—Ç–æ—è–Ω–∏–µ: {enabled}", callback_data="switch_message_enabled")],
        [InlineKeyboardButton(text=f"üí¨ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}", callback_data="enter_message_text")],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.MessagesPagination(page=page).pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.MessagePage(message_id=message_id).pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def settings_mess_page_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚úíÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>
        \n{placeholder}
    """)
    return txt


def settings_logger_text():
    config = sett.get("config")
    tg_logging_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["funpay"]["bot"]["tg_logging_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    tg_logging_chat_id = config["funpay"]["bot"]["tg_logging_chat_id"] or "‚úîÔ∏è –í–∞—à —á–∞—Ç —Å –±–æ—Ç–æ–º"
    tg_logging_events = config["funpay"]["bot"]["tg_logging_events"] or {}
    event_new_user_message = "üü¢" if tg_logging_events.get("new_user_message") else "üî¥"
    event_new_system_message = "üü¢" if tg_logging_events.get("new_system_message") else "üî¥"
    event_new_order = "üü¢" if tg_logging_events.get("new_order") else "üî¥"
    event_order_status_changed = "üü¢" if tg_logging_events.get("order_status_changed") else "üî¥"
    event_new_review = "üü¢" if tg_logging_events.get("new_review") else "üî¥"
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üëÄ –õ–æ–≥–≥–µ—Ä</b>

        üëÄ <b>–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–æ–≤ FunPay –≤ Telegram:</b> {tg_logging_enabled}
        üí¨ <b>ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤:</b> <b>{tg_logging_chat_id}</b>
        üì¢ <b>–ò–≤–µ–Ω—Ç—ã –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
        ‚î£ {event_new_user_message} <b>üí¨üë§ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>
        ‚î£ {event_new_system_message} <b>üí¨‚öôÔ∏è –ù–æ–≤–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>
        ‚î£ {event_new_order} <b>üìã –ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>
        ‚î£ {event_order_status_changed} <b>üîÑÔ∏èüìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è</b>
        ‚îó {event_new_review} <b>üí¨‚ú® –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>
        
        –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì
    """)
    return txt

def settings_logger_kb():
    config = sett.get("config")
    tg_logging_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["funpay"]["bot"]["tg_logging_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    tg_logging_chat_id = config["funpay"]["bot"]["tg_logging_chat_id"] or "‚úîÔ∏è –í–∞—à —á–∞—Ç —Å –±–æ—Ç–æ–º"
    tg_logging_events = config["funpay"]["bot"]["tg_logging_events"] or {}
    event_new_user_message = "üü¢" if tg_logging_events.get("new_user_message") else "üî¥"
    event_new_system_message = "üü¢" if tg_logging_events.get("new_system_message") else "üî¥"
    event_new_order = "üü¢" if tg_logging_events.get("new_order") else "üî¥"
    event_order_status_changed = "üü¢" if tg_logging_events.get("order_status_changed") else "üî¥"
    event_new_review = "üü¢" if tg_logging_events.get("new_review") else "üî¥"
    rows = [
        [InlineKeyboardButton(text=f"üëÄ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–æ–≤ FunPay –≤ Telegram: {tg_logging_enabled}", callback_data="switch_tg_logging_enabled")],
        [InlineKeyboardButton(text=f"üí¨ ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤: {tg_logging_chat_id}", callback_data="enter_tg_logging_chat_id")],
        [
        InlineKeyboardButton(text=f"{event_new_user_message} üí¨üë§ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="switch_tg_logging_event_new_user_message"),
        InlineKeyboardButton(text=f"{event_new_system_message} üí¨‚öôÔ∏è –ù–æ–≤–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="switch_tg_logging_event_new_system_message"),
        ],
        [
        InlineKeyboardButton(text=f"{event_new_order} üìã –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="switch_tg_logging_event_new_order"),
        InlineKeyboardButton(text=f"{event_order_status_changed} üîÑÔ∏èüìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è", callback_data="switch_tg_logging_event_order_status_changed"),
        InlineKeyboardButton(text=f"{event_new_review} üí¨‚ú® –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤", callback_data="switch_tg_logging_event_new_review")
        ],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.SettingsNavigation(to="default").pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.SettingsNavigation(to="logger").pack())
        ]
    ]
    if config["funpay"]["bot"]["tg_logging_chat_id"]:
        rows[1].append(InlineKeyboardButton(text=f"‚ùåüí¨ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clean_tg_logging_chat_id"))
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def settings_logger_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üëÄ –õ–æ–≥–≥–µ—Ä</b>
        \n{placeholder}
    """)
    return txt


def settings_tickets_text():
    config = sett.get("config")
    auto_support_tickets_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["funpay"]["bot"]["auto_support_tickets_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    auto_support_tickets_orders_per_ticket = config["funpay"]["bot"]["auto_support_tickets_orders_per_ticket"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    auto_support_tickets_create_interval = config["funpay"]["bot"]["auto_support_tickets_create_interval"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üìû –¢–∏–∫–µ—Ç—ã</b>

        üìß <b>–ê–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ:</b> {auto_support_tickets_enabled}
        üìã <b>–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–¥–Ω–æ–º —Ç–∏–∫–µ—Ç–µ:</b> {auto_support_tickets_orders_per_ticket}
        ‚è±Ô∏è <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤:</b> {auto_support_tickets_create_interval}

        <b>–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ?</b>
        –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∏–∫–µ—Ç—ã –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥. –ß–µ–º –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–¥–Ω–æ–º —Ç–∏–∫–µ—Ç–µ - —Ç–µ–º –¥–æ–ª—å—à–µ –µ–≥–æ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å, 25 –∑–∞–∫–∞–∑–æ–≤ - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. 24 —á–∞—Å–∞ - —Å–∞–º—ã–π –∏–¥–µ–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤, –≤–µ–¥—å –Ω–∞ FunPay —Å—Ç–æ–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ 1 —Ç–∏–∫–µ—Ç–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤ –¥–µ–Ω—å, —Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—å—à–µ –Ω–µ—Ç —Å–º—ã—Å–ª–∞

        –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì
    """)
    return txt

def settings_tickets_kb():
    config = sett.get("config")
    auto_support_tickets_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["funpay"]["bot"]["auto_support_tickets_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    auto_support_tickets_orders_per_ticket = config["funpay"]["bot"]["auto_support_tickets_orders_per_ticket"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    auto_support_tickets_create_interval = config["funpay"]["bot"]["auto_support_tickets_create_interval"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    rows = [
        [InlineKeyboardButton(text=f"üìß –ê–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ: {auto_support_tickets_enabled}", callback_data="switch_auto_support_tickets_enabled")],
        [InlineKeyboardButton(text=f"üìã –ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–¥–Ω–æ–º —Ç–∏–∫–µ—Ç–µ: {auto_support_tickets_orders_per_ticket}", callback_data="enter_auto_support_tickets_orders_per_ticket")],
        [InlineKeyboardButton(text=f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤: {auto_support_tickets_create_interval}", callback_data="enter_auto_support_tickets_create_interval")],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.SettingsNavigation(to="default").pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.SettingsNavigation(to="tickets").pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def settings_tickets_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üìû –¢–∏–∫–µ—Ç—ã</b>
        \n{placeholder}
    """)
    return txt


def settings_other_text():
    config = sett.get("config")
    auto_reviews_replies_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["funpay"]["bot"]["auto_reviews_replies_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    custom_commands_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["funpay"]["bot"]["custom_commands_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    auto_deliveries_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["funpay"]["bot"]["auto_deliveries_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    messages_watermark_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["funpay"]["bot"]["messages_watermark_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    messages_watermark = config["funpay"]["bot"]["messages_watermark"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üîß –ü—Ä–æ—á–µ–µ</b>

        üí¨ <b>–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã:</b> {auto_reviews_replies_enabled}
        üîß <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b> {custom_commands_enabled}
        üöÄ <b>–ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞:</b> {auto_deliveries_enabled}
        ¬©Ô∏è <b>–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:</b> {messages_watermark_enabled}
        ‚úçÔ∏è¬©Ô∏è <b>–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫:</b> {messages_watermark}

        <b>–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã?</b>
        –ö–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤, –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ. –í –æ—Ç–≤–µ—Ç–µ –Ω–∞ –æ—Ç–∑—ã–≤ –±—É–¥—É—Ç –Ω–∞–ø–∏—Å–∞–Ω—ã –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞.

        –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì
    """)
    return txt

def settings_other_kb():
    config = sett.get("config")
    auto_reviews_replies_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["funpay"]["bot"]["auto_reviews_replies_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    custom_commands_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["funpay"]["bot"]["custom_commands_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    auto_deliveries_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["funpay"]["bot"]["auto_deliveries_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    messages_watermark_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["funpay"]["bot"]["messages_watermark_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    messages_watermark = config["funpay"]["bot"]["messages_watermark"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    rows = [
        [InlineKeyboardButton(text=f"üí¨ –ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã: {auto_reviews_replies_enabled}", callback_data="switch_auto_reviews_replies_enabled")],
        [InlineKeyboardButton(text=f"üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: {custom_commands_enabled}", callback_data="switch_custom_commands_enabled")],
        [InlineKeyboardButton(text=f"üöÄ –ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞: {auto_deliveries_enabled}", callback_data="switch_auto_deliveries_enabled")],
        [InlineKeyboardButton(text=f"¬©Ô∏è –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {messages_watermark_enabled}", callback_data="switch_messages_watermark_enabled")],
        [InlineKeyboardButton(text=f"‚úçÔ∏è¬©Ô∏è –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫: {messages_watermark}", callback_data="enter_messages_watermark")],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.SettingsNavigation(to="default").pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.SettingsNavigation(to="other").pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def settings_other_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üîß –ü—Ä–æ—á–µ–µ</b>
        \n{placeholder}
    """)
    return txt


def modules_text():
    from core.modules_manager import ModulesManager
    modules = ModulesManager.get_modules()
    txt = textwrap.dedent(f"""
        üîå <b>–ú–æ–¥—É–ª–∏</b>
        –í—Å–µ–≥–æ <b>{len(modules)}</b> –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π

        –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Üì
    """)
    return txt

def modules_kb(page: int = 0):
    from core.modules_manager import ModulesManager
    modules = ModulesManager.get_modules()
    rows = []
    items_per_page = 7
    total_pages = math.ceil(len(modules) / items_per_page)
    total_pages = total_pages if total_pages > 0 else 1

    if page < 0: page = 0
    elif page >= total_pages: page = total_pages - 1

    start_offset = page * items_per_page
    end_offset = start_offset + items_per_page

    for module in list(modules)[start_offset:end_offset]:
        rows.append([InlineKeyboardButton(text=module.meta.name, callback_data=calls.ModulePage(uuid=module.uuid).pack())])

    buttons_row = []
    if page > 0: btn_back = InlineKeyboardButton(text="‚Üê", callback_data=calls.ModulesPagination(page=page - 1).pack())
    else: btn_back = InlineKeyboardButton(text="üõë", callback_data="123")
    buttons_row.append(btn_back)

    buttons_row.append(InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="enter_module_page"))

    if page < total_pages - 1: btn_next = InlineKeyboardButton(text="‚Üí", callback_data=calls.ModulesPagination(page=page+1).pack())
    else: btn_next = InlineKeyboardButton(text="üõë", callback_data="123")
    buttons_row.append(btn_next)
    rows.append(buttons_row)

    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.MenuNavigation(to="default").pack())])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb


def module_page_text(module_uuid: UUID):
    from core.modules_manager import ModulesManager, Module
    module: Module = ModulesManager.get_module_by_uuid(module_uuid)
    if not module: raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª—å")
    txt = textwrap.dedent(f"""
        üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–º</b>

        <b>–ú–æ–¥—É–ª—å</b> <code>{module.meta.name}</code>:          
        ‚î£ UUID: <b>{module.uuid}</b>
        ‚î£ –í–µ—Ä—Å–∏—è: <b>{module.meta.version}</b>
        ‚î£ –û–ø–∏—Å–∞–Ω–∏–µ: <blockquote>{module.meta.description}</blockquote>
        ‚î£ –ê–≤—Ç–æ—Ä—ã: <b>{module.meta.authors}</b>
        ‚îó –°—Å—ã–ª–∫–∏: <b>{module.meta.links}</b>

        üîå <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {'üü¢ –í–∫–ª—é—á–µ–Ω' if module.enabled else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}

        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Üì
    """)
    return txt

def module_page_kb(module_uuid: UUID, page: int = 0):
    from core.modules_manager import ModulesManager, Module
    module: Module = ModulesManager.get_module_by_uuid(module_uuid)
    if not module: raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª—å")
    rows = [
        [InlineKeyboardButton(text="üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å" if module.enabled else "üü¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å", callback_data="switch_module_enabled")],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.ModulesPagination(page=page).pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.ModulePage(uuid=module_uuid).pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb

def module_page_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–º</b>
        \n{placeholder}
    """)
    return txt


def call_seller_text(calling_name, chat_link):
    txt = textwrap.dedent(f"""
        üÜò <b>{calling_name}</b> —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–∞ –ø–æ–º–æ—â—å!
        {chat_link}
    """)
    return txt