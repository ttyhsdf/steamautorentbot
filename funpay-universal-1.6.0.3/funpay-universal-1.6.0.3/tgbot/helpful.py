from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.exceptions import TelegramAPIError
from . import templates as templ


async def do_auth(message: Message, state: FSMContext):
    from . import states
    await state.set_state(states.SystemStates.entering_password)
    return await throw_float_message(state=state,
                                     message=message,
                                     text=templ.sign_text('üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á-–ø–∞—Ä–æ–ª—å, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –±–æ—Ç–∞ ‚Üì\n\n<span class="tg-spoiler">–ï—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏, –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø–æ –ø—É—Ç–∏ bot_settings/config.json, –ø–∞—Ä–∞–º–µ—Ç—Ä password –≤ —Ä–∞–∑–¥–µ–ª–µ telegram.bot</span>'),
                                     reply_markup=templ.destroy_kb())

async def throw_float_message(state: FSMContext, message: Message, text: str, 
                              reply_markup: InlineKeyboardMarkup = None,
                              callback: CallbackQuery = None,
                              send: bool = False) -> Message | None:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç –ø–ª–∞–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è) –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç `message`.\n
    –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è - –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–æ–≤–æ–µ –∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞.
    :type state: `aiogram.fsm.context.FSMContext`
    
    :param message: –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ handler –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :type message: `aiogram.types.Message`

    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :type text: `str`

    :param reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, _–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ_.
    :type reply_markup: `aiogram.typesInlineKeyboardMarkup.`

    :param callback: CallbackQuery —Ö–µ–Ω–¥–ª–µ—Ä–∞, –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—É—Å—Ç–æ–π AnswerCallbackQuery, _–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ_.
    :type callback: `aiogram.types.CallbackQuery` or `None`

    :param send: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏ –Ω–æ–≤–æ–µ –∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, _–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ_.
    :type send: `bool`
    """
    from .telegrambot import get_telegram_bot
    try:
        bot = get_telegram_bot().bot
        data = await state.get_data()
        accent_message_id = message.message_id
        if message.from_user and message.from_user.id != bot.id:
            accent_message_id = data.get("accent_message_id")
        mess = None
        new_mess_cond = False

        if not send:
            if message.text is not None:
                new_mess_cond = message.from_user.id != bot.id and message.text.startswith('/')

            if accent_message_id is not None and not new_mess_cond:
                try:
                    if message.from_user.id != bot.id: 
                        await bot.delete_message(message.chat.id, message.message_id)
                    mess = await bot.edit_message_text(text=text, reply_markup=reply_markup, 
                                                    chat_id=message.chat.id, message_id=accent_message_id, parse_mode="HTML")
                except TelegramAPIError as e:
                    if "message to edit not found" in e.message.lower():
                        accent_message_id = None
                    elif "message is not modified" in e.message.lower():
                        await bot.answer_callback_query(callback.id, show_alert=False, cache_time=0)
                        pass
                    else:
                        raise e
        if callback:
            await bot.answer_callback_query(callback.id, show_alert=False, cache_time=0)
        if accent_message_id is None or new_mess_cond or send:
            mess = await bot.send_message(chat_id=message.chat.id, text=text, 
                                          reply_markup=reply_markup, parse_mode="HTML")
    except Exception as e:
        import traceback
        traceback.print_exc()
        try:
            mess = await bot.edit_message_text(chat_id=message.chat.id, reply_markup=templ.destroy_kb(),
                                               text=templ.error_text(e), message_id=accent_message_id, parse_mode="HTML")
        except Exception as e:
            mess = await bot.send_message(chat_id=message.chat.id, reply_markup=templ.destroy_kb(),
                                          text=templ.error_text(e), parse_mode="HTML")
    finally:
        if mess: await state.update_data(accent_message_id=mess.message_id)
    return mess