from __future__ import annotations
from __init__ import ACCENT_COLOR
import asyncio
from colorama import Fore
import textwrap

from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand, InlineKeyboardMarkup
from aiogram.exceptions import TelegramUnauthorizedError

from . import router as main_router
from . import templates as templ

from settings import Settings as sett
import logging
logger = logging.getLogger(f"universal.telegram")

from core.modules_manager import ModulesManager as modules_m
from core.handlers_manager import HandlersManager as handlers_m


def get_telegram_bot_loop() -> None | asyncio.AbstractEventLoop:
    if hasattr(TelegramBot, "loop"):
        return getattr(TelegramBot, "loop")

def get_telegram_bot() -> None | TelegramBot:
    if hasattr(TelegramBot, "instance"):
        return getattr(TelegramBot, "instance")

class TelegramBot:
    def __new__(cls, *args, **kwargs):
        if not hasattr(cls, "instance"):
            cls.instance = super(TelegramBot, cls).__new__(cls)
            cls.loop = asyncio.get_running_loop()
        return getattr(cls, "instance")

    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        logging.getLogger("aiogram").setLevel(logging.ERROR)
        logging.getLogger("aiogram.event").setLevel(logging.ERROR)

        self.bot = Bot(token=self.bot_token)
        self.dp = Dispatcher()
        
        for module in modules_m.get_modules():
            for router in module.telegram_bot_routers:
                main_router.include_router(router)
        self.dp.include_router(main_router)

    async def set_main_menu(self):
        try:
            main_menu_commands = [BotCommand(command="/start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            await self.bot.set_my_commands(main_menu_commands)
        except:
            pass

    async def set_short_description(self):
        try:
            short_description = textwrap.dedent(f"""
                üì£ @alexeyproduction
                ü§ñ @alexey_production_bot
                üßë‚Äçüíª @alleexxeeyy
            """)
            await self.bot.set_my_short_description(short_description=short_description)
        except:
            pass

    async def set_description(self):
        try:
            description = textwrap.dedent(f"""
                FunPay Universal ‚Äî –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è FunPay üü¶
                                        
                üü¢ –í–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω
                ‚¨ÜÔ∏è –ê–≤—Ç–æ-–ø–æ–¥–Ω—è—Ç–∏–µ
                üì¶ –ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞
                üïπÔ∏è –ö–æ–º–∞–Ω–¥—ã
                üí¨‚ú® –ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã
                üí¨ –í—ã–∑–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ —á–∞—Ç
                üìû –ê–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤
                                        
                ‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –±–æ—Ç–∞: https://github.com/alleexxeeyy/funpay-universal
                
                üì£ –ö–∞–Ω–∞–ª ‚Äî @alexeyproduction
                ü§ñ –ë–æ—Ç ‚Äî @alexey_production_bot
                üßë‚Äçüíª –ê–≤—Ç–æ—Ä ‚Äî @alleexxeeyy
            """)
            await self.bot.set_my_description(description=description)
        except:
            pass

    async def run_bot(self):
        await self.set_main_menu()
        await self.set_short_description()
        await self.set_description()
        
        bot_event_handlers = handlers_m.get_bot_event_handlers()
        async def handle_on_telegram_bot_init():
            """ 
            –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π Telegram –±–æ—Ç–∞. 
            –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞ —Å–æ–±–æ–π –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ON_TELEGRAM_BOT_INIT.
            """
            if "ON_TELEGRAM_BOT_INIT" in bot_event_handlers:
                for handler in bot_event_handlers["ON_TELEGRAM_BOT_INIT"]:
                    try:
                        await handler(self)
                    except Exception as e:
                        logger.error(f"{Fore.LIGHTRED_EX}{Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –≤ –∏–≤–µ–Ω—Ç–∞ ON_TELEGRAM_BOT_INIT: {Fore.WHITE}{e}")
        await handle_on_telegram_bot_init()
        
        me = await self.bot.get_me()
        logger.info(f"{Fore.CYAN}Telegram –±–æ—Ç {Fore.LIGHTCYAN_EX}@{me.username} {Fore.CYAN}–∑–∞–ø—É—â–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω")
        await self.dp.start_polling(self.bot, skip_updates=True, handle_signals=False)
        
    async def call_seller(self, calling_name: str, chat_id: int | str):
        """
        –ü–∏—à–µ—Ç –∞–¥–º–∏–Ω—É –≤ Telegram —Å –ø—Ä–æ—Å—å–±–æ–π –æ –ø–æ–º–æ—â–∏ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞.
                
        :param calling_name: –ù–∏–∫–Ω–µ–π–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
        :type calling_name: `str`

        :param chat_id: ID —á–∞—Ç–∞ —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º.
        :type chat_id: `int` or `str`
        """
        config = sett.get("config")
        for user_id in config["telegram"]["bot"]["signed_users"]:
            await self.bot.send_message(chat_id=user_id, 
                                        text=templ.call_seller_text(calling_name, f"https://funpay.com/chat/?node={chat_id}"),
                                        reply_markup=templ.destroy_kb(),
                                        parse_mode="HTML")
            
    async def log_event(self, text: str, kb: InlineKeyboardMarkup | None = None):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ —á–∞—Ç TG –±–æ—Ç–∞.
                
        :param text: –¢–µ–∫—Å—Ç –ª–æ–≥–∞.
        :type text: `str`
                
        :param kb: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
        :type kb: `aiogram.types.InlineKeyboardMarkup` or `None`
        """
        config = sett.get("config")
        chat_id = config["funpay"]["bot"]["tg_logging_chat_id"]
        if not chat_id:
            for user_id in config["telegram"]["bot"]["signed_users"]:
                await self.bot.send_message(chat_id=user_id, text=text, reply_markup=kb, parse_mode="HTML")
        else:
            await self.bot.send_message(chat_id=chat_id, text=f'{text}\n<span class="tg-spoiler">–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —á–∞—Ç –ª–æ–≥–æ–≤ –Ω–∞ —á–∞—Ç —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å –º–µ–Ω—é —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏</span>', reply_markup=None, parse_mode="HTML")

if __name__ == "__main__":
    config = sett.get("config")
    asyncio.run(TelegramBot(config["telegram"]["api"]["token"]).run_bot())