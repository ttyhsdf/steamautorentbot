#!/usr/bin/env python3
"""
üß© Chat Sync Plugin - –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Steam Auto Rent Bot
–ü–ª–∞–≥–∏–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—â–∏–π FunPay —á–∞—Ç—ã —Å Telegram —á–∞—Ç–æ–º (—Ñ–æ—Ä—É–º–æ–º).
–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—É—é —Ç–µ–º—É - –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –Ω—É–∂–Ω—ã–π FunPay —á–∞—Ç! –ò –Ω–∞–æ–±–æ—Ä–æ—Ç!
"""

import os
import sys
import json
import time
import threading
import sqlite3
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from databaseHandler.databaseSetup import SQLiteDB
from logger import logger
from messaging.message_sender import message_sender, initialize_message_sender

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–ª–∞–≥–∏–Ω–∞
PLUGIN_NAME = "Chat Sync Plugin"
PLUGIN_VERSION = "1.0.0"
PLUGIN_DESCRIPTION = "–ü–ª–∞–≥–∏–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—â–∏–π FunPay —á–∞—Ç—ã —Å Telegram —á–∞—Ç–æ–º (—Ñ–æ—Ä—É–º–æ–º).\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—É—é —Ç–µ–º—É - –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –Ω—É–∂–Ω—ã–π FunPay —á–∞—Ç! –ò –Ω–∞–æ–±–æ—Ä–æ—Ç!"
PLUGIN_FOLDER = "plugins/chat_sync"
CONFIG_FILE = os.path.join(PLUGIN_FOLDER, "config.json")
THREADS_FILE = os.path.join(PLUGIN_FOLDER, "threads.json")
BOTS_FILE = os.path.join(PLUGIN_FOLDER, "bots.json")

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
SPECIAL_SYMBOL = "‚Å¢"
MIN_BOTS = 2  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã
BOT_DELAY = 2  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π

class ChatSyncPlugin:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø–ª–∞–≥–∏–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤"""
    
    def __init__(self):
        self.db = SQLiteDB()
        self.config = self.load_config()
        self.threads = self.load_threads()
        self.bots = []
        self.current_bot = None
        self.ready = False
        self.initialized = False
        self.sync_running = False
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–ª–∞–≥–∏–Ω–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(PLUGIN_FOLDER, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
        self.init()
    
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–∞–≥–∏–Ω–∞"""
        default_config = {
            "chat_id": None,
            "watermark_is_hidden": False,
            "image_name": True,
            "mono": False,
            "buyer_viewing": True,
            "edit_topic": True,
            "templates": False,
            "self_notify": True,
            "auto_sync_accounts": True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
            "sync_rental_status": True,  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä–µ–Ω–¥—ã
            "notify_on_rental_change": True  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã
        }
        
        if os.path.exists(CONFIG_FILE):
            try:
                with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    default_config.update(config)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
        
        return default_config
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
    
    def load_threads(self) -> Dict[str, int]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É FunPay —á–∞—Ç–∞–º–∏ –∏ Telegram —Ç–µ–º–∞–º–∏"""
        if os.path.exists(THREADS_FILE):
            try:
                with open(THREADS_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–µ–π —á–∞—Ç–æ–≤: {str(e)}")
        return {}
    
    def save_threads(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É FunPay —á–∞—Ç–∞–º–∏ –∏ Telegram —Ç–µ–º–∞–º–∏"""
        try:
            with open(THREADS_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.threads, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–µ–π —á–∞—Ç–æ–≤: {str(e)}")
    
    def load_bots(self) -> List[Dict[str, str]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Telegram –±–æ—Ç–æ–≤"""
        if os.path.exists(BOTS_FILE):
            try:
                with open(BOTS_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤: {str(e)}")
        return []
    
    def save_bots(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ Telegram –±–æ—Ç–æ–≤"""
        try:
            with open(BOTS_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.bots, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–æ—Ç–æ–≤: {str(e)}")
    
    def init(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {PLUGIN_NAME} v{PLUGIN_VERSION}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç–æ–≤
            self.bots = self.load_bots()
            if self.bots:
                self.current_bot = self.bots[0]
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FunPay
            self.auto_setup_funpay_mode()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
            # –ü–ª–∞–≥–∏–Ω –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ FunPay (–±–µ–∑ Telegram)
            if self.config.get('chat_id') and len(self.bots) >= MIN_BOTS:
                self.ready = True
                logger.info("–ü–ª–∞–≥–∏–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (–ø–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º: FunPay + Telegram)")
            elif len(self.bots) >= 1:
                self.ready = True
                logger.info("–ü–ª–∞–≥–∏–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (—Ä–µ–∂–∏–º FunPay)")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ FunPay
                self.auto_sync_with_funpay_accounts()
            else:
                logger.warning("–ü–ª–∞–≥–∏–Ω –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ Telegram –±–æ—Ç–∞.")
            
            self.initialized = True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞: {str(e)}")
            self.initialized = False
    
    def auto_setup_funpay_mode(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FunPay"""
        try:
            # –ï—Å–ª–∏ –Ω–µ—Ç –±–æ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FunPay
            if not self.bots:
                demo_bot = {
                    'token': 'demo_token_for_funpay_mode',
                    'username': 'funpay_sync_bot',
                    'added_at': datetime.now().isoformat(),
                    'demo': True
                }
                self.bots.append(demo_bot)
                self.current_bot = demo_bot
                self.save_bots()
                logger.info("–°–æ–∑–¥–∞–Ω –¥–µ–º–æ-–±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FunPay")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ FunPay
            if not self.config.get('funpay_only_mode'):
                self.config['funpay_only_mode'] = True
                self.config['auto_sync_accounts'] = True
                self.config['sync_rental_status'] = True
                self.config['notify_on_rental_change'] = True
                self.save_config()
                logger.info("–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ FunPay")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FunPay: {str(e)}")
    
    def add_bot(self, token: str, username: str = None) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ Telegram –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±–æ—Ç —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º
            for bot in self.bots:
                if bot.get('token') == token:
                    logger.warning("–ë–æ—Ç —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
                    return False
            
            bot_data = {
                'token': token,
                'username': username or f"bot_{len(self.bots) + 1}",
                'added_at': datetime.now().isoformat()
            }
            
            self.bots.append(bot_data)
            self.save_bots()
            
            if not self.current_bot:
                self.current_bot = self.bots[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
            if (self.config.get('chat_id') and 
                len(self.bots) >= MIN_BOTS):
                self.ready = True
            
            logger.info(f"–ë–æ—Ç @{bot_data['username']} –¥–æ–±–∞–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞: {str(e)}")
            return False
    
    def remove_bot(self, index: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –±–æ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        try:
            if 0 <= index < len(self.bots):
                removed_bot = self.bots.pop(index)
                self.save_bots()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞
                if self.bots:
                    self.current_bot = self.bots[0]
                else:
                    self.current_bot = None
                    self.ready = False
                
                logger.info(f"–ë–æ—Ç @{removed_bot['username']} —É–¥–∞–ª–µ–Ω")
                return True
            else:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –±–æ—Ç–∞: {index}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞: {str(e)}")
            return False
    
    def set_chat_id(self, chat_id: int) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID —á–∞—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            self.config['chat_id'] = chat_id
            self.save_config()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
            if len(self.bots) >= MIN_BOTS:
                self.ready = True
                logger.info(f"–ß–∞—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {chat_id}")
            else:
                logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Ç–∞: {str(e)}")
            return False
    
    def create_sync_thread(self, fp_chat_id: int, chat_name: str) -> Optional[int]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º—É –≤ Telegram –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å FunPay —á–∞—Ç–æ–º"""
        try:
            if not self.ready or not self.current_bot:
                logger.warning("–ü–ª–∞–≥–∏–Ω –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–µ–º—ã")
                return None
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã –≤ Telegram
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID
            thread_id = int(time.time())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å
            self.threads[str(fp_chat_id)] = thread_id
            self.save_threads()
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞ –¥–ª—è —á–∞—Ç–∞ {chat_name} (ID: {fp_chat_id})")
            return thread_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã: {str(e)}")
            return None
    
    def sync_account_with_chat(self, account_id: int, fp_chat_id: int) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç —Å FunPay —á–∞—Ç–æ–º"""
        try:
            account = self.db.get_account_by_id(account_id)
            if not account:
                logger.error(f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if str(fp_chat_id) not in self.threads:
                thread_id = self.create_sync_thread(fp_chat_id, account['account_name'])
                if not thread_id:
                    return False
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {account['account_name']} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —á–∞—Ç–æ–º {fp_chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
            return False
    
    def handle_rental_status_change(self, account_id: int, old_owner: str, new_owner: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            if not self.config.get('notify_on_rental_change'):
                return
            
            account = self.db.get_account_by_id(account_id)
            if not account:
                return
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
            for fp_chat_id, thread_id in self.threads.items():
                if self.config.get('sync_rental_status'):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                    message = self.format_rental_status_message(account, old_owner, new_owner)
                    self.send_telegram_message(thread_id, message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä–µ–Ω–¥—ã: {str(e)}")
    
    def format_rental_status_message(self, account: Dict, old_owner: str, new_owner: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä–µ–Ω–¥—ã"""
        if new_owner:
            status = f"üü¢ –ê–∫–∫–∞—É–Ω—Ç {account['account_name']} –≤–∑—è—Ç –≤ –∞—Ä–µ–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {new_owner}"
        else:
            status = f"üî¥ –ê–∫–∫–∞—É–Ω—Ç {account['account_name']} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –æ—Ç –∞—Ä–µ–Ω–¥—ã"
        
        return f"""
{status}

üìã –î–µ—Ç–∞–ª–∏:
‚Ä¢ –õ–æ–≥–∏–Ω: {account['login']}
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {account['rental_duration']}—á
‚Ä¢ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """.strip()
    
    def send_telegram_message(self, thread_id: int, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Ç–µ–º—É"""
        try:
            if not self.current_bot:
                logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return False
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º—É {thread_id}: {message[:50]}...")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—Ç–∞
            self.switch_bot()
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")
            return False
    
    def switch_bot(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—Ç–∞"""
        if len(self.bots) > 1:
            current_index = self.bots.index(self.current_bot) if self.current_bot in self.bots else 0
            next_index = (current_index + 1) % len(self.bots)
            self.current_bot = self.bots[next_index]
    
    def send_funpay_message(self, fp_chat_id: int, message: str, username: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ FunPay —á–∞—Ç"""
        try:
            if not message_sender.is_initialized():
                logger.error("MessageSender –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –µ—Å–ª–∏ –µ—Å—Ç—å
            clean_message = message.replace(SPECIAL_SYMBOL, "")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            success = message_sender.send_message_by_owner(username or str(fp_chat_id), clean_message)
            
            if success:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ FunPay —á–∞—Ç {fp_chat_id}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ FunPay —á–∞—Ç {fp_chat_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ FunPay: {str(e)}")
            return False
    
    def handle_funpay_message(self, fp_chat_id: int, message: str, sender: str = None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ FunPay"""
        try:
            if not self.ready:
                logger.warning("–ü–ª–∞–≥–∏–Ω –Ω–µ –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
                return
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ FunPay —á–∞—Ç–∞ {fp_chat_id}: {message[:50]}...")
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ FunPay, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            if self.config.get('funpay_only_mode'):
                logger.info(f"FunPay —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {sender or 'Unknown'} -> {message[:100]}")
                
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–¥–µ—Å—å
                # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                
            else:
                # –†–µ–∂–∏–º —Å Telegram - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É
                thread_id = self.threads.get(str(fp_chat_id))
                if thread_id:
                    self.send_telegram_message(thread_id, f"**{sender or 'FunPay'}**: {message}")
                else:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–º–∞ –¥–ª—è FunPay —á–∞—Ç–∞ {fp_chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è FunPay: {str(e)}")
    
    def handle_rental_status_change(self, account_id: int, old_owner: str, new_owner: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            if not self.config.get('notify_on_rental_change'):
                return
            
            account = self.db.get_account_by_id(account_id)
            if not account:
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            status_message = self.format_rental_status_message(account, old_owner, new_owner)
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ FunPay
            if self.config.get('funpay_only_mode'):
                logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä–µ–Ω–¥—ã: {status_message}")
                
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ FunPay —á–∞—Ç
                fp_chat_id = account_id
                if str(fp_chat_id) in self.threads:
                    self.send_funpay_message(fp_chat_id, status_message)
            else:
                # –†–µ–∂–∏–º —Å Telegram - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–º—ã
                for fp_chat_id, thread_id in self.threads.items():
                    if self.config.get('sync_rental_status'):
                        self.send_telegram_message(thread_id, status_message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä–µ–Ω–¥—ã: {str(e)}")
    
    def get_plugin_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–≥–∏–Ω–∞"""
        return {
            'name': PLUGIN_NAME,
            'version': PLUGIN_VERSION,
            'initialized': self.initialized,
            'ready': self.ready,
            'chat_id': self.config.get('chat_id'),
            'bots_count': len(self.bots),
            'threads_count': len(self.threads),
            'config': self.config
        }
    
    def get_accounts_with_sync(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            accounts = self.db.get_all_accounts()
            synced_accounts = []
            
            for account in accounts:
                account_info = account.copy()
                account_info['synced'] = str(account['id']) in self.threads
                account_info['thread_id'] = self.threads.get(str(account['id']))
                synced_accounts.append(account_info)
            
            return synced_accounts
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}")
            return []
    
    def sync_all_accounts(self) -> Dict[str, int]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å —á–∞—Ç–∞–º–∏"""
        try:
            accounts = self.db.get_all_accounts()
            synced_count = 0
            error_count = 0
            
            for account in accounts:
                if self.sync_account_with_chat(account['id'], account['id']):
                    synced_count += 1
                else:
                    error_count += 1
                
                time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è–º–∏
            
            logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {synced_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫")
            return {'synced': synced_count, 'errors': error_count}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return {'synced': 0, 'errors': 1}
    
    def auto_sync_with_funpay_accounts(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ FunPay"""
        try:
            if not self.config.get('auto_sync_accounts'):
                return
            
            accounts = self.db.get_all_accounts()
            if not accounts:
                logger.info("–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return
            
            logger.info(f"–ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ FunPay")
            
            synced_count = 0
            for account in accounts:
                try:
                    # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–æ–º –∏ FunPay —á–∞—Ç–æ–º
                    fp_chat_id = account['id']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–∞–∫ ID —á–∞—Ç–∞
                    
                    if str(fp_chat_id) not in self.threads:
                        self.threads[str(fp_chat_id)] = f"funpay_chat_{fp_chat_id}"
                        synced_count += 1
                        logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {account['account_name']} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å FunPay —á–∞—Ç–æ–º {fp_chat_id}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.get('account_name', 'Unknown')}: {str(e)}")
            
            if synced_count > 0:
                self.save_threads()
                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {synced_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")


class ChatSyncManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–æ–º Chat Sync"""
    
    def __init__(self):
        self.plugin = ChatSyncPlugin()
    
    def show_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–≥–∏–Ω–∞"""
        status = self.plugin.get_plugin_status()
        
        print(f"\n{'='*60}")
        print(f"üß© {status['name']} v{status['version']}")
        print(f"{'='*60}")
        print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {'‚úÖ –î–∞' if status['initialized'] else '‚ùå –ù–µ—Ç'}")
        print(f"–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ: {'‚úÖ –î–∞' if status['ready'] else '‚ùå –ù–µ—Ç'}")
        print(f"–ß–∞—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {status['chat_id'] or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤: {status['bots_count']}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {status['threads_count']}")
        print(f"{'='*60}")
    
    def show_accounts(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        accounts = self.plugin.get_accounts_with_sync()
        
        if not accounts:
            print("üìã –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"\nüìã –ê–∫–∫–∞—É–Ω—Ç—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π ({len(accounts)} —à—Ç.)")
        print("=" * 80)
        
        for i, account in enumerate(accounts, 1):
            sync_status = "üü¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω" if account['synced'] else "üî¥ –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω"
            owner_status = "üî¥ –í –∞—Ä–µ–Ω–¥–µ" if account['owner'] else "üü¢ –°–≤–æ–±–æ–¥–µ–Ω"
            
            print(f"{i:2d}. {account['account_name']}")
            print(f"    ID: {account['id']}")
            print(f"    –õ–æ–≥–∏–Ω: {account['login']}")
            print(f"    –°—Ç–∞—Ç—É—Å –∞—Ä–µ–Ω–¥—ã: {owner_status}")
            print(f"    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {sync_status}")
            if account['thread_id']:
                print(f"    ID —Ç–µ–º—ã: {account['thread_id']}")
            print("-" * 40)
    
    def add_bot(self, token: str, username: str = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        if self.plugin.add_bot(token, username):
            print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞")
    
    def remove_bot(self, index: int):
        """–£–¥–∞–ª—è–µ—Ç –±–æ—Ç–∞"""
        if self.plugin.remove_bot(index):
            print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞")
    
    def set_chat(self, chat_id: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        if self.plugin.set_chat_id(chat_id):
            print(f"‚úÖ –ß–∞—Ç {chat_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Ç–∞")
    
    def sync_accounts(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
        print("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        result = self.plugin.sync_all_accounts()
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result['synced']} —É—Å–ø–µ—à–Ω–æ, {result['errors']} –æ—à–∏–±–æ–∫")


def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–æ–º"""
    manager = ChatSyncManager()
    
    while True:
        print("\n" + "=" * 60)
        print("üß© –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–õ–ê–ì–ò–ù–û–ú CHAT SYNC")
        print("=" * 60)
        print("1. üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–≥–∏–Ω–∞")
        print("2. üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π")
        print("3. ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏")
        print("4. üí¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞")
        print("5. üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        print("6. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞")
        print("7. ‚ùå –í—ã—Ö–æ–¥")
        print("=" * 60)
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-7): ").strip()
        
        if choice == "1":
            manager.show_status()
        
        elif choice == "2":
            manager.show_accounts()
        
        elif choice == "3":
            manager.manage_bots()
        
        elif choice == "4":
            manager.manage_chat()
        
        elif choice == "5":
            manager.sync_accounts()
        
        elif choice == "6":
            manager.manage_settings()
        
        elif choice == "7":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    def manage_bots(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏"""
        while True:
            print("\n" + "=" * 40)
            print("ü§ñ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–ê–ú–ò")
            print("=" * 40)
            print("1. üìã –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤")
            print("2. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞")
            print("3. üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞")
            print("4. ‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            print("=" * 40)
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
            
            if choice == "1":
                self.show_bots()
            
            elif choice == "2":
                self.add_bot_menu()
            
            elif choice == "3":
                self.remove_bot_menu()
            
            elif choice == "4":
                break
            
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    def show_bots(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤"""
        bots = self.plugin.bots
        
        if not bots:
            print("üìã –ë–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"\nüìã –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ ({len(bots)} —à—Ç.)")
        print("=" * 50)
        
        for i, bot in enumerate(bots):
            current = " (—Ç–µ–∫—É—â–∏–π)" if bot == self.plugin.current_bot else ""
            print(f"{i+1}. @{bot['username']}{current}")
            print(f"   –¢–æ–∫–µ–Ω: {bot['token'][:20]}...")
            print(f"   –î–æ–±–∞–≤–ª–µ–Ω: {bot.get('added_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print("-" * 30)
    
    def add_bot_menu(self):
        """–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
        token = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ").strip()
        if not token:
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        username = input("–í–≤–µ–¥–∏—Ç–µ username –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ").strip()
        if not username:
            username = None
        
        self.add_bot(token, username)
    
    def remove_bot_menu(self):
        """–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
        self.show_bots()
        
        try:
            index = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")) - 1
            self.remove_bot(index)
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞")
    
    def manage_chat(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º"""
        print("\n" + "=" * 40)
        print("üí¨ –ù–ê–°–¢–†–û–ô–ö–ê –ß–ê–¢–ê")
        print("=" * 40)
        print(f"–¢–µ–∫—É—â–∏–π —á–∞—Ç: {self.plugin.config.get('chat_id') or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        
        chat_id = input("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        
        if chat_id:
            try:
                chat_id = int(chat_id)
                self.set_chat(chat_id)
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")
    
    def manage_settings(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        while True:
            print("\n" + "=" * 40)
            print("‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ü–õ–ê–ì–ò–ù–ê")
            print("=" * 40)
            print("1. üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("2. üîß –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("3. ‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            print("=" * 40)
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-3): ").strip()
            
            if choice == "1":
                self.show_settings()
            
            elif choice == "2":
                self.edit_settings()
            
            elif choice == "3":
                break
            
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        config = self.plugin.config
        
        print("\nüìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print("=" * 40)
        for key, value in config.items():
            print(f"{key}: {value}")
    
    def edit_settings(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("\nüîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        
        settings = [
            ("watermark_is_hidden", "–°–∫—Ä—ã–≤–∞—Ç—å –≤–æ—Ç–µ—Ä–º–∞—Ä–∫—É", bool),
            ("image_name", "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–º—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", bool),
            ("mono", "–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç", bool),
            ("buyer_viewing", "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —á—Ç–æ —Å–º–æ—Ç—Ä–∏—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—å", bool),
            ("edit_topic", "–ò–∑–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã", bool),
            ("templates", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã", bool),
            ("self_notify", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–µ–±—è", bool),
            ("auto_sync_accounts", "–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤", bool),
            ("sync_rental_status", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä–µ–Ω–¥—ã", bool),
            ("notify_on_rental_change", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã", bool)
        ]
        
        for i, (key, description, _) in enumerate(settings, 1):
            current_value = self.plugin.config.get(key, False)
            status = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if current_value else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ"
            print(f"{i:2d}. {description}: {status}")
        
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã): "))
            if choice == 0:
                return
            
            if 1 <= choice <= len(settings):
                key, description, value_type = settings[choice - 1]
                current_value = self.plugin.config.get(key, False)
                
                if value_type == bool:
                    new_value = not current_value
                    self.plugin.config[key] = new_value
                    self.plugin.save_config()
                    
                    status = "–≤–∫–ª—é—á–µ–Ω–∞" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
                    print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{description}' {status}")
                else:
                    print("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")


if __name__ == "__main__":
    main()
