# Standard library imports
import random
import time
import asyncio
import sqlite3
import threading
import re
from datetime import datetime, timedelta

# Third-party imports
from FunPayAPI import Account, Runner, types, enums, events

# Project-specific imports
from config import FUNPAY_GOLDEN_KEY, ADMIN_ID, HOURS_FOR_REVIEW

from databaseHandler.databaseSetup import SQLiteDB
from steamHandler.SteamGuard import get_steam_guard_code
from steamHandler.changePassword import changeSteamPassword
from steamHandler.auto_guard import start_auto_guard, send_welcome_guard_code, get_auto_guard_stats
from messaging.message_sender import initialize_message_sender, send_message_by_owner
from logger import logger
from pytz import timezone


TOKEN = FUNPAY_GOLDEN_KEY
REFRESH_INTERVAL = 1300  # 30 minutes in seconds

feedbackGiven = []

moscow_tz = timezone("Europe/Moscow")

db = SQLiteDB()


def refresh_session():
    global acc, runner
    logger.info("Refreshing FunPay session...")
    acc = Account(TOKEN).get()
    runner = Runner(acc)
    logger.info("FunPay session refreshed successfully.")


def check_rental_expiration():
    """Checks for expired rentals and changes passwords every minute"""
    while True:
        try:
            conn = sqlite3.connect("database.db")
            cursor = conn.cursor()
            
            # Get all accounts with active rentals
            cursor.execute("""
                SELECT id, account_name, login, password, rental_duration, rental_start, owner
                FROM accounts 
                WHERE owner IS NOT NULL AND rental_start IS NOT NULL
            """)
            
            active_rentals = cursor.fetchall()
            
            for rental in active_rentals:
                account_id, account_name, login, password, rental_duration, rental_start, owner = rental
                
                # Check if rental has expired
                start_time = datetime.fromisoformat(rental_start)
                end_time = start_time + timedelta(hours=rental_duration)
                
                if datetime.now() >= end_time:
                    logger.info(f"Rental expired for account {account_name} (owner: {owner})")
                    
                    # Change password
                    try:
                        cursor.execute("SELECT path_to_maFile FROM accounts WHERE id = ?", (account_id,))
                        mafile_result = cursor.fetchone()
                        
                        if mafile_result:
                            mafile_path = mafile_result[0]
                            new_password = asyncio.run(changeSteamPassword(mafile_path, password))
                            
                            # Update password in database
                            cursor.execute(
                                "UPDATE accounts SET password = ? WHERE id = ?",
                                (new_password, account_id)
                            )
                            
                            logger.info(f"Password changed for expired account {account_name}")
                            
                    except Exception as e:
                        logger.error(f"Error changing password for account {account_id}: {str(e)}")
                    
                    # Clear owner and rental_start
                    cursor.execute(
                        "UPDATE accounts SET owner = NULL, rental_start = NULL WHERE id = ?",
                        (account_id,)
                    )
                    
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                    db.deactivate_customer_activity(owner, account_id)
                    
                    logger.info(f"Account {account_name} released from {owner}")
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"Error in rental expiration checker: {str(e)}")

        time.sleep(60)  # Check every 60 seconds (1 minute)


def startFunpay():
    global acc, runner

    try:
        logger.info("Starting FunPay bot...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if not TOKEN or TOKEN.strip() == "":
            logger.error("FunPay Golden Key –Ω–µ –∑–∞–¥–∞–Ω!")
            print("‚ùå –û—à–∏–±–∫–∞: FUNPAY_GOLDEN_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ config.py")
            return
        
        acc = Account(TOKEN).get()
        runner = Runner(acc)
        logger.info("FunPay account and runner initialized.")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π
        initialize_message_sender(acc)
        logger.info("Message sender initialized.")
        
        last_refresh = time.time()

        logger.info("Starting rental expiration checker thread...")

        timerChecker_thread = threading.Thread(target=check_rental_expiration, daemon=True)
        timerChecker_thread.start()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É –≤—ã–¥–∞—á–∏ Steam Guard –∫–æ–¥–æ–≤
        logger.info("Starting AutoGuard system...")
        start_auto_guard()

        logger.info("FunPay bot started successfully. Listening for events...")

        for event in runner.listen(requests_delay=8):
            try:
                global send_message_by_owner
                current_time = time.time()
                if current_time - last_refresh >= REFRESH_INTERVAL:
                    logger.info("Refreshing session due to interval timeout...")
                    refresh_session()
                    last_refresh = current_time

                def send_message_by_owner(owner, message):
                    try:
                        chat = acc.get_chat_by_name(owner, True)
                        acc.send_message(chat.id, message)
                    except Exception as e:
                        logger.error(f"Failed to send message to {owner}: {str(e)}")

                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ —Å–æ–±—ã—Ç–∏—è
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event.type}", extra_info=f"Event type: {event.type}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
                if hasattr(events.EventTypes, 'INITIAL_CHAT') and event.type is events.EventTypes.INITIAL_CHAT:
                    logger.debug("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞", extra_info="Initializing chat connection")
                    # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ FunPay
                    
                elif hasattr(events.EventTypes, 'NEW_ORDER') and event.type is events.EventTypes.NEW_ORDER:
                    logger.info("üõí –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞", extra_info=f"Order ID: {event.order.id}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                    logger.new_order(
                        event.order.id, 
                        event.order.buyer_username, 
                        event.order.amount, 
                        event.order.price
                    )

                    accounts = db.get_unowned_accounts()

                    acc = Account(TOKEN).get()
                    chat = acc.get_chat_by_name(event.order.buyer_username, True)

                    all_accounts = db.get_all_account_names()

                    order_name = event.order.description
                    number_of_orders = event.order.amount

                    logger.debug(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {order_name}", extra_info="Original order name")

                    cleaned_order_name = re.sub(r"[^\w\s]", " ", order_name)
                    cleaned_order_name = " ".join(cleaned_order_name.split())
                    logger.debug(f"–û—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {cleaned_order_name}", extra_info="Cleaned order name")

                    matched_account = None
                    max_similarity = 0

                    for account in all_accounts:
                        cleaned_account = re.sub(r"[^\w\s]", " ", account)
                        cleaned_account = " ".join(cleaned_account.split())

                        if cleaned_account.lower() in cleaned_order_name.lower():
                            similarity = len(cleaned_account)
                            if similarity > max_similarity:
                                max_similarity = similarity
                                matched_account = account

                    if matched_account:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–∫–∫–∞—É–Ω—Ç: {matched_account}", extra_info="Account matched successfully")

                        available_accounts = [
                            acc for acc in accounts if acc["account_name"] == matched_account
                        ]

                        if len(available_accounts) >= number_of_orders:
                            logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(available_accounts)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è {matched_account}", 
                                      extra_info=f"Available: {len(available_accounts)}, Required: {number_of_orders}")

                            selected_accounts = available_accounts[:number_of_orders]

                            for i, account in enumerate(selected_accounts):
                                try:
                                    # Set owner and rental start time
                                    db.set_account_owner(account["id"], event.order.buyer_username)
                                    
                                    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–¥–∞—á—É –∞–∫–∫–∞—É–Ω—Ç–∞
                                    logger.account_assigned(account["id"], event.order.buyer_username, account['account_name'])
                                    
                                    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                                    db.log_customer_purchase(
                                        event.order.buyer_username,
                                        account["id"],
                                        account['account_name'],
                                        account['rental_duration']
                                    )

                                    # Send account confirmation to buyer (without credentials)
                                    message = (
                                        f"‚úÖ **–ê–∫–∫–∞—É–Ω—Ç #{i+1} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
                                        f"üìù **–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID:** `{account['id']}`\n"
                                        f"üîë **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{account['account_name']}`\n"
                                        f"‚è± **–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:** {account['rental_duration']} —á–∞—Å–æ–≤\n\n"
                                        f"üîê **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:**\n"
                                        f"`/get_account {account['id']}`\n\n"
                                        f"üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                                        f"‚Ä¢ `/get_account {account['id']}` - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 3 —Ä–∞–∑–∞)\n"
                                        f"‚Ä¢ `/code` - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                                        f"‚Ä¢ `/question` - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n\n"
                                        f"‚ö†Ô∏è **–í–ê–ñ–ù–û:**\n"
                                        f"‚Ä¢ –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ 3 —Ä–∞–∑–∞ –∑–∞ –∞—Ä–µ–Ω–¥—É\n"
                                        f"‚Ä¢ –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
                                        f"‚Ä¢ –ó–∞ –æ—Ç–∑—ã–≤ –ø–æ–ª—É—á–∏—Ç–µ +{HOURS_FOR_REVIEW} —á–∞—Å –∞—Ä–µ–Ω–¥—ã\n\n"
                                        f"------------------------------------------------------------------------------"
                                    )

                                    send_message_by_owner(event.order.buyer_username, message)
                                    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {event.order.buyer_username}", 
                                               extra_info=f"Account ID: {account['id']}")
                                    
                                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Steam Guard –∫–æ–¥ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
                                    try:
                                        success = send_welcome_guard_code(
                                            account['id'], 
                                            account['account_name'], 
                                            event.order.buyer_username, 
                                            account['path_to_maFile']
                                        )
                                        if success:
                                            logger.info(f"Welcome guard code sent to {event.order.buyer_username} for {account['account_name']}")
                                        else:
                                            logger.warning(f"Failed to send welcome guard code to {event.order.buyer_username} for {account['account_name']}")
                                    except Exception as guard_error:
                                        logger.error(f"Error sending welcome guard code: {str(guard_error)}")

                                except Exception as e:
                                    logger.log_error("Account Assignment", f"Error assigning account {account['id']}: {str(e)}", 
                                                   f"Buyer: {event.order.buyer_username}, Account: {account['account_name']}")

                        else:
                            logger.warning(f"Not enough available accounts for {matched_account}")
                            send_message_by_owner(
                                event.order.buyer_username,
                                f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è '{matched_account}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                            )
                    else:
                        logger.warning(f"No matching account found for order: {order_name}")
                        send_message_by_owner(
                            event.order.buyer_username,
                            f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ '{order_name}'. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                        )

                elif hasattr(events.EventTypes, 'ORDER_PAID') and event.type is events.EventTypes.ORDER_PAID:
                    logger.log_order_paid(event.order.id, event.order.buyer_username, event.order.amount, event.order.price)
                    # –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω - –º–æ–∂–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                    
                elif hasattr(events.EventTypes, 'ORDER_CONFIRMED') and event.type is events.EventTypes.ORDER_CONFIRMED:
                    logger.log_order_confirmed(event.order.id, event.order.buyer_username)
                    # –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –∞–∫–∫–∞—É–Ω—Ç –≤—ã–¥–∞–Ω
                    
                elif hasattr(events.EventTypes, 'ORDER_REFUNDED') and event.type is events.EventTypes.ORDER_REFUNDED:
                    reason = getattr(event, 'reason', 'Unknown')
                    logger.log_order_refunded(event.order.id, event.order.buyer_username, reason)
                    # –ó–∞–∫–∞–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω - –Ω—É–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                    
                elif hasattr(events.EventTypes, 'NEW_MESSAGE') and event.type is events.EventTypes.NEW_MESSAGE:
                    logger.info("Processing new message event...")

                    conn = sqlite3.connect("database.db")
                    cursor = conn.cursor()

                    try:
                        sender_username = event.message.chat.name
                        message_text = event.message.text

                        logger.info(f"Message from {sender_username}: {message_text}")

                        # Check if user has active rentals
                        cursor.execute(
                            """
                            SELECT id, account_name, login, password, rental_duration, rental_start
                            FROM accounts 
                            WHERE owner = ? AND rental_start IS NOT NULL
                            """,
                            (sender_username,)
                        )

                        user_accounts = cursor.fetchall()

                        if user_accounts:
                            if message_text == "/code":
                                # Send Steam Guard code
                                for account in user_accounts:
                                    account_id, account_name, login, password, rental_duration, rental_start = account
                                    
                                    try:
                                        # Get maFile path
                                        cursor.execute(
                                            "SELECT path_to_maFile FROM accounts WHERE id = ?",
                                            (account_id,)
                                        )
                                        mafile_result = cursor.fetchone()
                                        
                                        if mafile_result:
                                            mafile_path = mafile_result[0]
                                            guard_code = get_steam_guard_code(mafile_path)
                                            
                                            if guard_code:
                                                send_message_by_owner(
                                                    sender_username,
                                                    f"üîê –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}:\n`{guard_code}`"
                                                )
                                            else:
                                                send_message_by_owner(
                                                    sender_username,
                                                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}"
                                                )
                                    except Exception as e:
                                        logger.error(f"Error getting guard code for account {account_id}: {str(e)}")
                                        send_message_by_owner(
                                            sender_username,
                                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}"
                                        )

                            elif message_text.startswith("/get_account "):
                                # Handle get_account command
                                try:
                                    account_id_str = message_text.split()[1]
                                    account_id = int(account_id_str)
                                    
                                    # Check if user can access this account
                                    access_check = db.can_access_account(account_id, sender_username)
                                    
                                    if not access_check["can_access"]:
                                        reason = access_check["reason"]
                                        send_message_by_owner(
                                            sender_username,
                                            f"‚ùå **–î–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É {account_id} –∑–∞–ø—Ä–µ—â–µ–Ω**\n\n"
                                            f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n\n"
                                            f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                                        )
                                    else:
                                        # Get account details
                                        cursor.execute(
                                            """
                                            SELECT account_name, login, password, rental_duration, access_count, max_access_count
                                            FROM accounts 
                                            WHERE id = ? AND owner = ?
                                            """,
                                            (account_id, sender_username)
                                        )
                                        account_data = cursor.fetchone()
                                        
                                        if account_data:
                                            account_name, login, password, rental_duration, access_count, max_access_count = account_data
                                            
                                            # Increment access count
                                            increment_result = db.increment_access_count(account_id, sender_username)
                                            
                                            if increment_result["success"]:
                                                new_access_count = increment_result["access_count"]
                                                remaining_access = max_access_count - new_access_count
                                                
                                                # Send account details
                                                message = (
                                                    f"üîê **–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}**\n\n"
                                                    f"üìù **ID:** `{account_id}`\n"
                                                    f"üë§ **–õ–æ–≥–∏–Ω:** `{login}`\n"
                                                    f"üîë **–ü–∞—Ä–æ–ª—å:** `{password}`\n"
                                                    f"‚è± **–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:** {rental_duration} —á–∞—Å–æ–≤\n\n"
                                                    f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞:**\n"
                                                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {new_access_count}/{max_access_count}\n"
                                                    f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_access}\n\n"
                                                    f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –î–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ {max_access_count} —Ä–∞–∑ –∑–∞ –∞—Ä–µ–Ω–¥—É!\n"
                                                    f"üîÑ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/code`"
                                                )
                                                
                                                send_message_by_owner(sender_username, message)
                                                
                                                # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞
                                                db.log_customer_access(sender_username, account_id)
                                                
                                                logger.info(f"Account data sent to {sender_username} for account {account_id} (access {new_access_count}/{max_access_count})")
                                            else:
                                                send_message_by_owner(
                                                    sender_username,
                                                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}"
                                                )
                                        else:
                                            send_message_by_owner(
                                                sender_username,
                                                f"‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º"
                                            )
                                            
                                except (ValueError, IndexError):
                                    send_message_by_owner(
                                        sender_username,
                                        "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã**\n\n"
                                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/get_account <ID_–∞–∫–∫–∞—É–Ω—Ç–∞>`\n"
                                        "–ü—Ä–∏–º–µ—Ä: `/get_account 123`"
                                    )
                                except Exception as e:
                                    logger.error(f"Error processing get_account command: {str(e)}")
                                    send_message_by_owner(
                                        sender_username,
                                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
                                    )

                            elif message_text == "/my_accounts":
                                # Show user's accounts with access info
                                try:
                                    accounts_info = []
                                    for account in user_accounts:
                                        account_id, account_name, login, password, rental_duration, rental_start = account
                                        
                                        # Get access info
                                        access_info = db.get_account_access_info(account_id)
                                        if access_info:
                                            access_count = access_info["access_count"]
                                            max_access_count = access_info["max_access_count"]
                                            remaining = max_access_count - access_count
                                            
                                            accounts_info.append(
                                                f"üîë **{account_name}** (ID: {account_id})\n"
                                                f"‚è± –ê—Ä–µ–Ω–¥–∞: {rental_duration}—á | üìä –î–æ—Å—Ç—É–ø: {access_count}/{max_access_count} (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining})\n"
                                                f"üí° –ö–æ–º–∞–Ω–¥–∞: `/get_account {account_id}`\n"
                                            )
                                    
                                    if accounts_info:
                                        message = (
                                            f"üìã **–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã** ({len(accounts_info)} —à—Ç.)\n\n" +
                                            "\n".join(accounts_info) +
                                            f"\nüí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/get_account <ID>` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö**"
                                        )
                                    else:
                                        message = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
                                    
                                    send_message_by_owner(sender_username, message)
                                    
                                except Exception as e:
                                    logger.error(f"Error showing user accounts: {str(e)}")
                                    send_message_by_owner(
                                        sender_username,
                                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}"
                                    )

                            elif message_text == "/question":
                                # Forward question to admin
                                admin_message = f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {sender_username}:\n\n{message_text}"
                                # You can implement admin notification here
                                logger.info(f"Question from {sender_username}: {message_text}")

                            else:
                                # Regular message - forward to admin
                                admin_message = f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_username}:\n\n{message_text}"
                                # You can implement admin notification here
                                logger.info(f"Message from {sender_username}: {message_text}")

                        else:
                            # User has no active rentals
                            send_message_by_owner(
                                sender_username,
                                "‚ùå **–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥**\n\n"
                                "üí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                                "‚Ä¢ `/my_accounts` - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã\n"
                                "‚Ä¢ `/get_account <ID>` - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                                "‚Ä¢ `/code` - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                                "‚Ä¢ `/question` - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n\n"
                                "üõí **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –Ω–∞ FunPay**"
                            )

                    except Exception as e:
                        logger.error(f"Error processing message: {str(e)}")
                    finally:
                        conn.close()

                elif hasattr(events.EventTypes, 'CHAT_OPENED') and event.type is events.EventTypes.CHAT_OPENED:
                    logger.log_chat_opened(event.chat.name)
                    # –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ
                    
                elif hasattr(events.EventTypes, 'CHAT_CLOSED') and event.type is events.EventTypes.CHAT_CLOSED:
                    logger.log_chat_closed(event.chat.name)
                    # –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç - –æ–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                    
                elif hasattr(events.EventTypes, 'LOT_UPDATE') and event.type is events.EventTypes.LOT_UPDATE:
                    logger.log_lot_updated(event.lot.name, "Updated")
                    # –õ–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                    
                elif hasattr(events.EventTypes, 'NEW_FEEDBACK') and event.type is events.EventTypes.NEW_FEEDBACK:
                    logger.log_feedback_received(event.feedback.author, event.feedback.rating, event.feedback.text)
                    # –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ - –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –∞—Ä–µ–Ω–¥—É –Ω–∞ +1 —á–∞—Å
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∑—ã–≤–µ
                        reviewer_username = event.feedback.author
                        rating = event.feedback.rating
                        review_text = event.feedback.text
                        
                        logger.info(f"Processing feedback from {reviewer_username}, rating: {rating}")
                        
                        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∞—Ä–µ–Ω–¥—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        cursor = db.conn.cursor()
                        cursor.execute(
                            """
                            SELECT id, account_name, rental_duration, rental_start
                            FROM accounts 
                            WHERE owner = ? AND rental_start IS NOT NULL
                            ORDER BY rental_start DESC
                            LIMIT 1
                            """,
                            (reviewer_username,)
                        )
                        
                        active_rental = cursor.fetchone()
                        
                        if active_rental:
                            account_id, account_name, current_duration, rental_start = active_rental
                            
                            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –∞—Ä–µ–Ω–¥—É –Ω–∞ HOURS_FOR_REVIEW —á–∞—Å–æ–≤
                            success = db.extend_rental_duration(account_id, HOURS_FOR_REVIEW)
                            
                            if success:
                                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                                db.log_customer_feedback(
                                    reviewer_username,
                                    account_id,
                                    rating,
                                    review_text
                                )
                                
                                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã
                                db.log_rental_extension(
                                    reviewer_username,
                                    account_id,
                                    HOURS_FOR_REVIEW
                                )
                                
                                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
                                cursor.execute(
                                    "SELECT rental_duration FROM accounts WHERE id = ?",
                                    (account_id,)
                                )
                                new_duration = cursor.fetchone()[0]
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                message = (
                                    f"üéâ **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!**\n\n"
                                    f"‚úÖ **–í–∞—à–∞ –∞—Ä–µ–Ω–¥–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ +{HOURS_FOR_REVIEW} —á–∞—Å!**\n\n"
                                    f"üìù **–ê–∫–∫–∞—É–Ω—Ç:** {account_name}\n"
                                    f"‚è± **–ù–æ–≤—ã–π —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:** {new_duration} —á–∞—Å–æ–≤\n"
                                    f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥ –æ—Ç–∑—ã–≤–∞:** {rating}/5\n\n"
                                    f"üí° **–í–∞—à –æ—Ç–∑—ã–≤:** {review_text}\n\n"
                                    f"üéÆ **–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!**"
                                )
                                
                                send_message_by_owner(reviewer_username, message)
                                
                                logger.info(f"Rental extended for {reviewer_username} by {HOURS_FOR_REVIEW} hours", 
                                          extra_info=f"Account: {account_name}, New duration: {new_duration}")
                                
                                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                                admin_message = (
                                    f"üìù **–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –ø–æ–ª—É—á–µ–Ω!**\n\n"
                                    f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {reviewer_username}\n"
                                    f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {rating}/5\n"
                                    f"üí¨ **–û—Ç–∑—ã–≤:** {review_text}\n"
                                    f"üéØ **–ê–∫–∫–∞—É–Ω—Ç:** {account_name}\n"
                                    f"‚è± **–ü—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞:** +{HOURS_FOR_REVIEW} —á–∞—Å\n"
                                    f"üìä **–ù–æ–≤—ã–π —Å—Ä–æ–∫:** {new_duration} —á–∞—Å–æ–≤"
                                )
                                
                                send_message_by_owner("admin", admin_message)
                                
                            else:
                                logger.warning(f"Failed to extend rental for {reviewer_username}")
                                send_message_by_owner(
                                    reviewer_username,
                                    f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã**\n\n"
                                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã. "
                                    f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                                )
                        else:
                            logger.info(f"No active rental found for reviewer {reviewer_username}")
                            send_message_by_owner(
                                reviewer_username,
                                f"üìù **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!**\n\n"
                                f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {rating}/5\n"
                                f"üí¨ **–û—Ç–∑—ã–≤:** {review_text}\n\n"
                                f"‚ÑπÔ∏è **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–¥—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è, "
                                f"–Ω–æ –º—ã —Ü–µ–Ω–∏–º –≤–∞—à –æ—Ç–∑—ã–≤!"
                            )
                        
                        cursor.close()
                        
                    except Exception as e:
                        logger.error(f"Error processing feedback: {str(e)}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                        try:
                            send_message_by_owner(
                                "admin",
                                f"‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞**\n\n"
                                f"**–ê–≤—Ç–æ—Ä:** {event.feedback.author}\n"
                                f"**–†–µ–π—Ç–∏–Ω–≥:** {event.feedback.rating}\n"
                                f"**–û—à–∏–±–∫–∞:** {str(e)}"
                            )
                        except:
                            pass
                    
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
                    event_name = str(event.type).split('.')[-1] if '.' in str(event.type) else str(event.type)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                    if event_name not in ['INITIAL_CHAT', 'HEARTBEAT', 'PING', 'PONG']:
                        logger.debug(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_name}", extra_info=f"Event type: {event.type}")
                    else:
                        # –î–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                        logger.debug(f"–°–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_name}", extra_info="Service event")

                logger.info("Event processed successfully.")

            except Exception as e:
                logger.error(f"An error occurred while processing event: {str(e)}")
    
    except Exception as e:
        logger.error(f"Critical error in startFunpay: {str(e)}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ FunPay: {str(e)}")
        raise


