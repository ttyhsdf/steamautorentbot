#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º
–ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å Error 409
"""

import os
import sys
import json
import time
import requests
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot_instance_manager import BotInstanceManager, force_cleanup_bot
from config import BOT_TOKEN, ADMIN_ID
from logger import logger


def check_telegram_api():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API...")
    
    try:
        response = requests.get(
            f"https://api.telegram.org/bot{BOT_TOKEN}/getMe",
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get("ok"):
                bot_info = data.get("result", {})
                print(f"‚úÖ Bot –¥–æ—Å—Ç—É–ø–µ–Ω: @{bot_info.get('username', 'Unknown')}")
                print(f"   ID: {bot_info.get('id', 'Unknown')}")
                print(f"   –ò–º—è: {bot_info.get('first_name', 'Unknown')}")
                return True
            else:
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data.get('description', 'Unknown error')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False


def check_webhook_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å webhook"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook...")
    
    try:
        response = requests.get(
            f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo",
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get("ok"):
                webhook_info = data.get("result", {})
                url = webhook_info.get("url", "")
                
                if url:
                    print(f"‚ö†Ô∏è Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
                    print("   –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å polling")
                    
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–¥–∞–ª–∏—Ç—å webhook
                    print("\nüîß –£–¥–∞–ª–µ–Ω–∏–µ webhook...")
                    delete_response = requests.get(
                        f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook",
                        timeout=10
                    )
                    
                    if delete_response.status_code == 200:
                        delete_data = delete_response.json()
                        if delete_data.get("ok"):
                            print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {delete_data.get('description', 'Unknown error')}")
                    else:
                        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {delete_response.status_code}")
                else:
                    print("‚úÖ Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return True
            else:
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data.get('description', 'Unknown error')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False


def check_bot_instance_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞...")
    
    try:
        manager = BotInstanceManager()
        status = manager.get_status()
        
        print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
        print(f"   Lock —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {status.get('lock_exists', False)}")
        print(f"   Lock –≤–∞–ª–∏–¥–µ–Ω: {status.get('lock_valid', False)}")
        print(f"   Bot –¥–æ—Å—Ç—É–ø–µ–Ω: {status.get('bot_accessible', False)}")
        print(f"   Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {status.get('python_processes', 0)}")
        print(f"   Heartbeat —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {status.get('heartbeat_exists', False)}")
        
        if status.get('lock_info'):
            lock_info = status['lock_info']
            print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:")
            print(f"   PID: {lock_info.get('pid', 'Unknown')}")
            print(f"   –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {lock_info.get('start_time', 'Unknown')}")
            print(f"   –¢–æ–∫–µ–Ω: {lock_info.get('token', 'Unknown')}")
            print(f"   Admin ID: {lock_info.get('admin_id', 'Unknown')}")
        
        return status
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        return None


def diagnose_and_fix():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"""
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê STEAM RENTAL BOT")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram API
    api_ok = check_telegram_api()
    if not api_ok:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Telegram API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN –≤ config.py")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
    webhook_ok = check_webhook_status()
    if not webhook_ok:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å webhook")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    status = check_bot_instance_status()
    if status is None:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        return False
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º...")
    
    problems = []
    
    if not status.get('bot_accessible', False):
        problems.append("Bot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ API")
    
    if status.get('lock_valid', False):
        problems.append("–ê–∫—Ç–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (–¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–ø—É—â–µ–Ω)")
    
    if status.get('python_processes', 0) > 1:
        problems.append("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã")
    
    if problems:
        print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for i, problem in enumerate(problems, 1):
            print(f"   {i}. {problem}")
        
        print(f"\nüîß –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        if force_cleanup_bot():
            print("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            print("\nüîç –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
            time.sleep(2)
            
            new_status = check_bot_instance_status()
            if new_status and not new_status.get('lock_valid', False):
                print("‚úÖ –ü—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                return True
            else:
                print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                return False
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É")
            return False
    else:
        print("\n‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return True


def interactive_fix():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
    print("\nüîß –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")
    print("=" * 30)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        print("2. üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞")
        print("3. üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
        print("4. üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API")
        print("5. ‚ùå –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()
        
        if choice == "1":
            diagnose_and_fix()
        elif choice == "2":
            print("\nüßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏...")
            if force_cleanup_bot():
                print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                print("‚ùå –û—á–∏—Å—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        elif choice == "3":
            check_bot_instance_status()
        elif choice == "4":
            check_telegram_api()
            check_webhook_status()
        elif choice == "5":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
        
        if len(sys.argv) > 1 and sys.argv[1] == "--interactive":
            interactive_fix()
        else:
            success = diagnose_and_fix()
            if success:
                print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: start.bat")
            else:
                print("\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã—è–≤–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã")
                print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: python diagnose_bot.py --interactive")
        
    except KeyboardInterrupt:
        print("\n\nüëã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}")
        logger.error(f"Diagnostic error: {str(e)}")
    
    print("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    input()
