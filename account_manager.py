#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Steam
–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª—è—Ç—å, –∑–∞–º–µ–Ω—è—Ç—å .maFile –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã
"""

import os
import sys
import json
import shutil
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from databaseHandler.databaseSetup import SQLiteDB
from logger import logger

class AccountManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Steam"""
    
    def __init__(self):
        self.db = SQLiteDB()
        self.accounts_dir = "accounts"
        self.backup_dir = "backups"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        os.makedirs(self.accounts_dir, exist_ok=True)
        os.makedirs(self.backup_dir, exist_ok=True)
    
    def list_all_accounts(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            accounts = self.db.get_all_accounts()
            
            if not accounts:
                print("üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç")
                return
            
            print(f"üìã –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
            print("=" * 80)
            
            for i, account in enumerate(accounts, 1):
                status = "üî¥ –í –∞—Ä–µ–Ω–¥–µ" if account['owner'] else "üü¢ –°–≤–æ–±–æ–¥–µ–Ω"
                owner_info = f"–í–ª–∞–¥–µ–ª–µ—Ü: {account['owner']}" if account['owner'] else "–°–≤–æ–±–æ–¥–µ–Ω"
                
                print(f"{i:2d}. {account['account_name']}")
                print(f"    ID: {account['id']}")
                print(f"    –õ–æ–≥–∏–Ω: {account['login']}")
                print(f"    –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {account['rental_duration']}—á")
                print(f"    –°—Ç–∞—Ç—É—Å: {status}")
                print(f"    {owner_info}")
                print(f"    .maFile: {account['path_to_maFile']}")
                print("-" * 40)
                
        except Exception as e:
            logger.error(f"Error listing accounts: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}")
    
    def delete_account(self, account_id):
        """–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ ID"""
        try:
            account = self.db.get_account_by_id(account_id)
            if not account:
                print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            print(f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {account['account_name']}")
            print(f"   ID: {account['id']}")
            print(f"   –õ–æ–≥–∏–Ω: {account['login']}")
            print(f"   .maFile: {account['path_to_maFile']}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm = input("\n‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ! (yes/no): ")
            if confirm.lower() != 'yes':
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                return False
            
            # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
            success = self.db.delete_account(account_id)
            
            if success:
                print("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞")
                return False
                
        except Exception as e:
            logger.error(f"Error deleting account {account_id}: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
            return False
    
    def replace_mafile(self, account_id, new_mafile_path):
        """–ó–∞–º–µ–Ω–∏—Ç—å .maFile –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account = self.db.get_account_by_id(account_id)
            if not account:
                print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            if not os.path.exists(new_mafile_path):
                print(f"‚ùå –§–∞–π–ª .maFile –Ω–µ –Ω–∞–π–¥–µ–Ω: {new_mafile_path}")
                return False
            
            print(f"üìÅ –ó–∞–º–µ–Ω–∞ .maFile –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {account['account_name']}")
            print(f"   –¢–µ–∫—É—â–∏–π: {account['path_to_maFile']}")
            print(f"   –ù–æ–≤—ã–π: {new_mafile_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π .maFile
            validation_result = self.db.validate_mafile(new_mafile_path)
            if not validation_result["valid"]:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π .maFile: {validation_result['error']}")
                return False
            
            print("‚úÖ .maFile –≤–∞–ª–∏–¥–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(account['path_to_maFile']):
                backup_path = os.path.join(self.backup_dir, f"backup_{account_id}_{int(time.time())}.maFile")
                shutil.copy2(account['path_to_maFile'], backup_path)
                print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
            
            # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            new_filename = f"account_{account_id}_{int(time.time())}.maFile"
            new_filepath = os.path.join(self.accounts_dir, new_filename)
            shutil.copy2(new_mafile_path, new_filepath)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = self.db.update_account_mafile(account_id, new_filepath)
            
            if success:
                print(f"‚úÖ .maFile —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω: {new_filepath}")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return False
                
        except Exception as e:
            logger.error(f"Error replacing mafile for account {account_id}: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ .maFile: {str(e)}")
            return False
    
    def validate_mafile(self, mafile_path):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å .maFile"""
        try:
            if not os.path.exists(mafile_path):
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {mafile_path}")
                return False
            
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .maFile: {mafile_path}")
            
            validation_result = self.db.validate_mafile(mafile_path)
            
            if validation_result["valid"]:
                data = validation_result["data"]
                print("‚úÖ .maFile –≤–∞–ª–∏–¥–µ–Ω!")
                print(f"   –ê–∫–∫–∞—É–Ω—Ç: {data['account_name']}")
                print(f"   Steam ID: {data['Session']['SteamID']}")
                print(f"   Device ID: {data['device_id']}")
                return True
            else:
                print(f"‚ùå .maFile –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {validation_result['error']}")
                return False
                
        except Exception as e:
            logger.error(f"Error validating mafile {mafile_path}: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ .maFile: {str(e)}")
            return False
    
    def cleanup_unused_accounts(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
        try:
            accounts = self.db.get_all_accounts()
            unused_accounts = [acc for acc in accounts if not acc['owner']]
            
            if not unused_accounts:
                print("üßπ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            print(f"üßπ –ù–∞–π–¥–µ–Ω–æ {len(unused_accounts)} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:")
            for acc in unused_accounts:
                print(f"   ‚Ä¢ {acc['account_name']} (ID: {acc['id']})")
            
            confirm = input("\n‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã? (yes/no): ")
            if confirm.lower() != 'yes':
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                return
            
            deleted_count = 0
            for acc in unused_accounts:
                if self.db.delete_account(acc['id']):
                    deleted_count += 1
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω: {acc['account_name']}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {acc['account_name']}")
            
            print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∏–∑ {len(unused_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"Error cleaning up accounts: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}")
    
    def batch_validate_mafiles(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ .maFile –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            accounts = self.db.get_all_accounts()
            
            if not accounts:
                print("üìã –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(accounts)} .maFile —Ñ–∞–π–ª–æ–≤...")
            print("=" * 60)
            
            valid_count = 0
            invalid_count = 0
            
            for account in accounts:
                mafile_path = account['path_to_maFile']
                print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {account['account_name']}")
                
                if not os.path.exists(mafile_path):
                    print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {mafile_path}")
                    invalid_count += 1
                    continue
                
                validation_result = self.db.validate_mafile(mafile_path)
                if validation_result["valid"]:
                    print(f"   ‚úÖ –í–∞–ª–∏–¥–µ–Ω")
                    valid_count += 1
                else:
                    print(f"   ‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω: {validation_result['error']}")
                    invalid_count += 1
                
                print("-" * 30)
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
            print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {valid_count}")
            print(f"   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {invalid_count}")
            print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö: {valid_count/len(accounts)*100:.1f}%")
            
        except Exception as e:
            logger.error(f"Error batch validating mafiles: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ .maFile: {str(e)}")
    
    def export_accounts(self, filename="accounts_export.json"):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ JSON"""
        try:
            accounts = self.db.get_all_accounts()
            
            if not accounts:
                print("üìã –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –£–±–∏—Ä–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            export_data = []
            for account in accounts:
                export_account = {
                    "id": account["id"],
                    "account_name": account["account_name"],
                    "login": account["login"],
                    "rental_duration": account["rental_duration"],
                    "owner": account["owner"],
                    "rental_start": account["rental_start"],
                    "path_to_maFile": account["path_to_maFile"]
                }
                export_data.append(export_account)
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {filename}")
            print(f"   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(export_data)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"Error exporting accounts: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Ç–∏–ª–∏—Ç—ã"""
    manager = AccountManager()
    
    while True:
        print("\n" + "=" * 60)
        print("üîß –ú–ï–ù–ï–î–ñ–ï–† –ê–ö–ö–ê–£–ù–¢–û–í STEAM")
        print("=" * 60)
        print("1. üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        print("2. üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        print("3. üìÅ –ó–∞–º–µ–Ω–∏—Ç—å .maFile")
        print("4. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å .maFile")
        print("5. üßπ –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ")
        print("6. üîç –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ .maFile")
        print("7. üì§ –≠–∫—Å–ø–æ—Ä—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        print("8. ‚ùå –í—ã—Ö–æ–¥")
        print("=" * 60)
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-8): ").strip()
        
        if choice == "1":
            manager.list_all_accounts()
        
        elif choice == "2":
            try:
                account_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
                manager.delete_account(account_id)
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
        
        elif choice == "3":
            try:
                account_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞: "))
                mafile_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É .maFile: ").strip()
                manager.replace_mafile(account_id, mafile_path)
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
        
        elif choice == "4":
            mafile_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ .maFile –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ").strip()
            manager.validate_mafile(mafile_path)
        
        elif choice == "5":
            manager.cleanup_unused_accounts()
        
        elif choice == "6":
            manager.batch_validate_mafiles()
        
        elif choice == "7":
            filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: accounts_export.json): ").strip()
            if not filename:
                filename = "accounts_export.json"
            manager.export_accounts(filename)
        
        elif choice == "8":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    import time
    main()
